// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nft1155

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Nft1155ABI is the input ABI used to generate the binding from.
const Nft1155ABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint257\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"CreateBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getNextTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_uris\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setIdURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_uris\",\"type\":\"string[]\"}],\"name\":\"setIdURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Nft1155Bin is the compiled bytecode used for deploying new contracts.
var Nft1155Bin = "0x608060405260006004553480156200001657600080fd5b506040518060400160405280600781526020017f4f7073204e4654000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4f707300000000000000000000000000000000000000000000000000000000008152506200009b6301ffc9a760e01b620001fc60201b60201c565b620000b363d9b67a2660e01b620001fc60201b60201c565b620000cb630e89341c60e01b620001fc60201b60201c565b6000620000dd620002d460201b60201c565b905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350816007908051906020019062000194929190620002f8565b508060089080519060200190620001ad929190620002f8565b505050620001f66040518060400160405280601681526020017f68747470733a2f2f7777772e62616964752e636f6d2f00000000000000000000815250620002dc60201b60201c565b6200041c565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025f90620003e9565b60405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b8060099080519060200190620002f4929190620002f8565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033b57805160ff19168380011785556200036c565b828001600101855582156200036c579182015b828111156200036b5782518255916020019190600101906200034e565b5b5090506200037b91906200037f565b5090565b620003a491905b80821115620003a057600081600090555060010162000386565b5090565b90565b6000620003b6601c836200040b565b91507f4552433136353a20696e76616c696420696e74657266616365206964000000006000830152602082019050919050565b600060208201905081810360008301526200040481620003a7565b9050919050565b600082825260208201905092915050565b6156bf806200042c6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637e518ec8116100de578063d2a6b51a11610097578063e985e9c511610071578063e985e9c514610490578063f242432a146104c0578063f2fde38b146104dc578063f5298aca146104f85761018d565b8063d2a6b51a14610428578063e1dbccfc14610444578063e38e3b24146104605761018d565b80637e518ec8146103685780638bf8e1a6146103845780638da5cb5b146103a057806395d89b41146103be578063a22cb465146103dc578063cd53d08e146103f85761018d565b80632eb2c2d61161014b5780635bb5387e116101255780635bb5387e146103085780636b20c45414610326578063715018a614610342578063731133e91461034c5761018d565b80632eb2c2d61461028c57806343f79a8c146102a85780634e1273f4146102d85761018d565b8062fdd58e1461019257806301ffc9a7146101c257806306fdde03146101f25780630e89341c146102105780631f7fdffa146102405780632693ebf21461025c575b600080fd5b6101ac60048036036101a79190810190613f56565b610514565b6040516101b99190615363565b60405180910390f35b6101dc60048036036101d791908101906141d8565b6105de565b6040516101e99190614fe4565b60405180910390f35b6101fa610645565b6040516102079190614fff565b60405180910390f35b61022a6004803603610225919081019061426b565b6106e3565b6040516102379190615021565b60405180910390f35b61025a60048036036102559190810190613e6f565b6107db565b005b6102766004803603610271919081019061426b565b61091a565b6040516102839190615363565b60405180910390f35b6102a660048036036102a19190810190613b95565b610932565b005b6102c260048036036102bd9190810190613ce3565b610cf6565b6040516102cf9190615363565b60405180910390f35b6102f260048036036102ed91908101906140f7565b6110fd565b6040516102ff9190614f8b565b60405180910390f35b6103106111e5565b60405161031d9190615363565b60405180910390f35b610340600480360361033b9190810190613df0565b611202565b005b61034a61136f565b005b6103666004803603610361919081019061407c565b6114ac565b005b610382600480360361037d919081019061422a565b61159e565b005b61039e60048036036103999190810190614294565b611626565b005b6103a8611792565b6040516103b59190614e85565b60405180910390f35b6103c66117bc565b6040516103d39190614fff565b60405180910390f35b6103f660048036036103f19190810190613f1a565b61185a565b005b610412600480360361040d919081019061426b565b6119db565b60405161041f9190614e85565b60405180910390f35b610442600480360361043d9190810190613d9c565b611a0e565b005b61045e60048036036104599190810190614163565b611ac2565b005b61047a60048036036104759190810190613f92565b611bed565b6040516104879190615363565b60405180910390f35b6104aa60048036036104a59190810190613b59565b611e37565b6040516104b79190614fe4565b60405180910390f35b6104da60048036036104d59190810190613c54565b611ecb565b005b6104f660048036036104f19190810190613b30565b61220e565b005b610512600480360361050d919081019061402d565b6123ba565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c90615083565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106db5780601f106106b0576101008083540402835291602001916106db565b820191906000526020600020905b8154815290600101906020018083116106be57829003601f168201915b505050505081565b606080600a60008481526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561078d5780601f106107625761010080835404028352916020019161078d565b820191906000526020600020905b81548152906001019060200180831161077057829003601f168201915b505050505090506000815111156107a757809150506107d6565b60096107b284612494565b6040516020016107c3929190614e56565b6040516020818303038152906040529150505b919050565b60008090505b83518110156109075760008482815181106107f857fe5b602002602001015190503373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a90615183565b60405180910390fd5b60008483815181106108b157fe5b602002602001015190506108e18160066000858152602001908152602001600020546125c790919063ffffffff16565b6006600084815260200190815260200160002081905550505080806001019150506107e1565b506109148484848461261c565b50505050565b60066020528060005260406000206000915090505481565b8151835114610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90615303565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd906151e3565b60405180910390fd5b6109ee61288d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a345750610a3385610a2e61288d565b611e37565b5b610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a90615203565b60405180910390fd5b6000610a7d61288d565b9050610a8d818787878787612895565b60008090505b8451811015610c61576000858281518110610aaa57fe5b602002602001015190506000858381518110610ac257fe5b60200260200101519050610b49816040518060600160405280602a8152602001615660602a91396001600086815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461289d9092919063ffffffff16565b6001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c00816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125c790919063ffffffff16565b6001600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050806001019050610a93565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610cd8929190614fad565b60405180910390a4610cee8187878787876128f2565b505050505050565b6000610d0061288d565b73ffffffffffffffffffffffffffffffffffffffff16610d1e611792565b73ffffffffffffffffffffffffffffffffffffffff1614610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90615243565b60405180910390fd5b60008787905011610dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db1906151c3565b60405180910390fd5b848490508787905014610e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df990615163565b60405180910390fd5b6000878790509050606081604051908082528060200260200182016040528015610e3b5781602001602082028038833980820191505090505b50905060008090505b82811015611009576000610e566111e5565b9050610e60612b7f565b336005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008b8b84818110610ec057fe5b905060200201359050610eef8160066000858152602001908152602001600020546125c790919063ffffffff16565b600660008481526020019081526020016000208190555081848481518110610f1357fe5b60200260200101818152505060608a8a85818110610f2d57fe5b9050602002810180356001602003833603038112610f4a57600080fd5b8083019250508135905060208201915067ffffffffffffffff811115610f6f57600080fd5b600181023603821315610f8157600080fd5b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600081511115610ff95780600a60008581526020019081526020016000209080519060200190610ff79291906136cc565b505b5050508080600101915050610e44565b5061109b8a828b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061261c565b3373ffffffffffffffffffffffffffffffffffffffff167fe6d9be50040b772bb48a973239d5787f4f958dcfc8ed688b457964da2df915358b846040516110e3929190614f62565b60405180910390a260045492505050979650505050505050565b60608151835114611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a906152e3565b60405180910390fd5b606083516040519080825280602002602001820160405280156111755781602001602082028038833980820191505090505b50905060008090505b84518110156111da576111b785828151811061119657fe5b60200260200101518583815181106111aa57fe5b6020026020010151610514565b8282815181106111c357fe5b60200260200101818152505080600101905061117e565b508091505092915050565b60006111fd60016004546125c790919063ffffffff16565b905090565b61120a61288d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611250575061124f8361124a61288d565b611e37565b5b61128f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611286906150e3565b60405180910390fd5b80518251146112d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ca906151a3565b60405180910390fd5b60008090505b825181101561135e5760008382815181106112f057fe5b60200260200101519050600083838151811061130857fe5b60200260200101519050611338816006600085815260200190815260200160002054612b9390919063ffffffff16565b6006600084815260200190815260200160002081905550505080806001019150506112d9565b5061136a838383612be3565b505050565b61137761288d565b73ffffffffffffffffffffffffffffffffffffffff16611395611792565b73ffffffffffffffffffffffffffffffffffffffff16146113eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e290615243565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b823373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461154e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154590615263565b60405180910390fd5b61155a85858585612e6d565b6115808360066000878152602001908152602001600020546125c790919063ffffffff16565b60066000868152602001908152602001600020819055505050505050565b6115a661288d565b73ffffffffffffffffffffffffffffffffffffffff166115c4611792565b73ffffffffffffffffffffffffffffffffffffffff161461161a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161190615243565b60405180910390fd5b61162381613054565b50565b61162e61288d565b73ffffffffffffffffffffffffffffffffffffffff1661164c611792565b73ffffffffffffffffffffffffffffffffffffffff16146116a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169990615243565b60405180910390fd5b6116ab8261306e565b6116ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e190615323565b60405180910390fd5b600081511161172e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172590615143565b60405180910390fd5b80600a600084815260200190815260200160002090805190602001906117559291906136cc565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516117869190615021565b60405180910390a25050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118525780601f1061182757610100808354040283529160200191611852565b820191906000526020600020905b81548152906001019060200180831161183557829003601f168201915b505050505081565b8173ffffffffffffffffffffffffffffffffffffffff1661187961288d565b73ffffffffffffffffffffffffffffffffffffffff1614156118d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c7906152a3565b60405180910390fd5b80600260006118dd61288d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661198a61288d565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119cf9190614fe4565b60405180910390a35050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7590615103565b60405180910390fd5b60008090505b8151811015611abd576000828281518110611a9b57fe5b60200260200101519050611aaf84826130da565b508080600101915050611a84565b505050565b818190508484905014611b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b01906152c3565b60405180910390fd5b60008090505b84849050811015611be657611bd9858583818110611b2a57fe5b90506020020135848484818110611b3d57fe5b9050602002810180356001602003833603038112611b5a57600080fd5b8083019250508135905060208201915067ffffffffffffffff811115611b7f57600080fd5b600181023603821315611b9157600080fd5b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611626565b8080600101915050611b10565b5050505050565b6000611bf761288d565b73ffffffffffffffffffffffffffffffffffffffff16611c15611792565b73ffffffffffffffffffffffffffffffffffffffff1614611c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6290615243565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611cdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd290615283565b60405180910390fd5b6000611ce56111e5565b9050611cef612b7f565b336005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000868690501115611d71578585600a60008481526020019081526020016000209190611d6f92919061374c565b505b611dc188828987878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612e6d565b8660066000838152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f923f1fa2c44c3aec741bc0bb74cfdb2d73d61ea532799cda54b2941d89ab9fc68989604051611e21929190614f62565b60405180910390a2809150509695505050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f32906151e3565b60405180910390fd5b611f4361288d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611f895750611f8885611f8361288d565b611e37565b5b611fc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbf906150e3565b60405180910390fd5b6000611fd261288d565b9050611ff2818787611fe3886131d3565b611fec886131d3565b87612895565b61206f836040518060600160405280602a8152602001615660602a91396001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461289d9092919063ffffffff16565b6001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612126836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125c790919063ffffffff16565b6001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516121f092919061537e565b60405180910390a461220681878787878761322c565b505050505050565b61221661288d565b73ffffffffffffffffffffffffffffffffffffffff16612234611792565b73ffffffffffffffffffffffffffffffffffffffff161461228a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228190615243565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f1906150a3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6123c261288d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061240857506124078361240261288d565b611e37565b5b612447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243e906150e3565b60405180910390fd5b6124528383836134b9565b6124788160066000858152602001908152602001600020546125c790919063ffffffff16565b6006600084815260200190815260200160002081905550505050565b606060008214156124dc576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125c2565b6000829050600083905060005b6000831461250b578080600101915050600a838161250357fe5b0492506124e9565b6060816040519080825280601f01601f1916602001820160405280156125405781602001600182028038833980820191505090505b50905060006001830390505b600084146125b957600a848161255e57fe5b0660300160f81b8282806001900393508151811061257857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84816125b157fe5b04935061254c565b81955050505050505b919050565b600080828401905083811015612612576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612609906150c3565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561268c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268390615343565b60405180910390fd5b81518351146126d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c790615303565b60405180910390fd5b60006126da61288d565b90506126eb81600087878787612895565b60008090505b84518110156127f7576127836001600087848151811061270d57fe5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485838151811061276d57fe5b60200260200101516125c790919063ffffffff16565b6001600087848151811061279357fe5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806001019150506126f1565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161286f929190614fad565b60405180910390a4612886816000878787876128f2565b5050505050565b600033905090565b505050505050565b60008383111582906128e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128dc9190615021565b60405180910390fd5b5082840390509392505050565b6129118473ffffffffffffffffffffffffffffffffffffffff166136b9565b15612b77578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612957959493929190614ea0565b602060405180830381600087803b15801561297157600080fd5b505af19250505080156129a257506040513d601f19601f8201168201806040525061299f9190810190614201565b60015b612aee576000604051905060008152600115612a6b5760443d10156129ca5760009050612a6b565b60046000803e60005160e01c6308c379a081146129eb576000915050612a6b565b60043d036004833e81513d602482011167ffffffffffffffff82111715612a1757600092505050612a6b565b808301805167ffffffffffffffff811115612a39576000945050505050612a6b565b8060208301013d8601811115612a5757600095505050505050612a6b565b601f19601f82011660405282955050505050505b80612a765750612ab3565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aaa9190615021565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae590615043565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6c90615063565b60405180910390fd5b505b505050505050565b600460008154809291906001019190505550565b600082821115612bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcf90615123565b60405180910390fd5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4a90615223565b60405180910390fd5b8051825114612c97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8e90615303565b60405180910390fd5b6000612ca161288d565b9050612cc181856000868660405180602001604052806000815250612895565b60008090505b8351811015612de757612d73838281518110612cdf57fe5b602002602001015160405180606001604052806024815260200161563c6024913960016000888681518110612d1057fe5b6020026020010151815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461289d9092919063ffffffff16565b60016000868481518110612d8357fe5b6020026020010151815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050612cc7565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612e5f929190614fad565b60405180910390a450505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed490615343565b60405180910390fd5b6000612ee761288d565b9050612f0881600087612ef9886131d3565b612f02886131d3565b87612895565b612f6b836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125c790919063ffffffff16565b6001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161303692919061537e565b60405180910390a461304d8160008787878761322c565b5050505050565b806009908051906020019061306a9291906136cc565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b803373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461317c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317390615263565b60405180910390fd5b826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60608060016040519080825280602002602001820160405280156132065781602001602082028038833980820191505090505b509050828160008151811061321757fe5b60200260200101818152505080915050919050565b61324b8473ffffffffffffffffffffffffffffffffffffffff166136b9565b156134b1578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613291959493929190614f08565b602060405180830381600087803b1580156132ab57600080fd5b505af19250505080156132dc57506040513d601f19601f820116820180604052506132d99190810190614201565b60015b6134285760006040519050600081526001156133a55760443d101561330457600090506133a5565b60046000803e60005160e01c6308c379a081146133255760009150506133a5565b60043d036004833e81513d602482011167ffffffffffffffff82111715613351576000925050506133a5565b808301805167ffffffffffffffff8111156133735760009450505050506133a5565b8060208301013d8601811115613391576000955050505050506133a5565b601f19601f82011660405282955050505050505b806133b057506133ed565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e49190615021565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341f90615043565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146134af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134a690615063565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352090615223565b60405180910390fd5b600061353361288d565b905061356381856000613545876131d3565b61354e876131d3565b60405180602001604052806000815250612895565b6135e08260405180606001604052806024815260200161563c602491396001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461289d9092919063ffffffff16565b6001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6286866040516136ab92919061537e565b60405180910390a450505050565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061370d57805160ff191683800117855561373b565b8280016001018555821561373b579182015b8281111561373a57825182559160200191906001019061371f565b5b50905061374891906137cc565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061378d57803560ff19168380011785556137bb565b828001600101855582156137bb579182015b828111156137ba57823582559160200191906001019061379f565b5b5090506137c891906137cc565b5090565b6137ee91905b808211156137ea5760008160009055506001016137d2565b5090565b90565b600081359050613800816155df565b92915050565b600082601f83011261381757600080fd5b813561382a613825826153d4565b6153a7565b9150818183526020840193506020810190508385602084028201111561384f57600080fd5b60005b8381101561387f578161386588826137f1565b845260208401935060208301925050600181019050613852565b5050505092915050565b60008083601f84011261389b57600080fd5b8235905067ffffffffffffffff8111156138b457600080fd5b6020830191508360208202830111156138cc57600080fd5b9250929050565b60008083601f8401126138e557600080fd5b8235905067ffffffffffffffff8111156138fe57600080fd5b60208301915083602082028301111561391657600080fd5b9250929050565b600082601f83011261392e57600080fd5b813561394161393c826153fc565b6153a7565b9150818183526020840193506020810190508385602084028201111561396657600080fd5b60005b83811015613996578161397c8882613b1b565b845260208401935060208301925050600181019050613969565b5050505092915050565b6000813590506139af816155f6565b92915050565b6000813590506139c48161560d565b92915050565b6000815190506139d98161560d565b92915050565b60008083601f8401126139f157600080fd5b8235905067ffffffffffffffff811115613a0a57600080fd5b602083019150836001820283011115613a2257600080fd5b9250929050565b600082601f830112613a3a57600080fd5b8135613a4d613a4882615424565b6153a7565b91508082526020830160208301858383011115613a6957600080fd5b613a7483828461558c565b50505092915050565b60008083601f840112613a8f57600080fd5b8235905067ffffffffffffffff811115613aa857600080fd5b602083019150836001820283011115613ac057600080fd5b9250929050565b600082601f830112613ad857600080fd5b8135613aeb613ae682615450565b6153a7565b91508082526020830160208301858383011115613b0757600080fd5b613b1283828461558c565b50505092915050565b600081359050613b2a81615624565b92915050565b600060208284031215613b4257600080fd5b6000613b50848285016137f1565b91505092915050565b60008060408385031215613b6c57600080fd5b6000613b7a858286016137f1565b9250506020613b8b858286016137f1565b9150509250929050565b600080600080600060a08688031215613bad57600080fd5b6000613bbb888289016137f1565b9550506020613bcc888289016137f1565b945050604086013567ffffffffffffffff811115613be957600080fd5b613bf58882890161391d565b935050606086013567ffffffffffffffff811115613c1257600080fd5b613c1e8882890161391d565b925050608086013567ffffffffffffffff811115613c3b57600080fd5b613c4788828901613a29565b9150509295509295909350565b600080600080600060a08688031215613c6c57600080fd5b6000613c7a888289016137f1565b9550506020613c8b888289016137f1565b9450506040613c9c88828901613b1b565b9350506060613cad88828901613b1b565b925050608086013567ffffffffffffffff811115613cca57600080fd5b613cd688828901613a29565b9150509295509295909350565b60008060008060008060006080888a031215613cfe57600080fd5b6000613d0c8a828b016137f1565b975050602088013567ffffffffffffffff811115613d2957600080fd5b613d358a828b016138d3565b9650965050604088013567ffffffffffffffff811115613d5457600080fd5b613d608a828b01613889565b9450945050606088013567ffffffffffffffff811115613d7f57600080fd5b613d8b8a828b016139df565b925092505092959891949750929550565b60008060408385031215613daf57600080fd5b6000613dbd858286016137f1565b925050602083013567ffffffffffffffff811115613dda57600080fd5b613de68582860161391d565b9150509250929050565b600080600060608486031215613e0557600080fd5b6000613e13868287016137f1565b935050602084013567ffffffffffffffff811115613e3057600080fd5b613e3c8682870161391d565b925050604084013567ffffffffffffffff811115613e5957600080fd5b613e658682870161391d565b9150509250925092565b60008060008060808587031215613e8557600080fd5b6000613e93878288016137f1565b945050602085013567ffffffffffffffff811115613eb057600080fd5b613ebc8782880161391d565b935050604085013567ffffffffffffffff811115613ed957600080fd5b613ee58782880161391d565b925050606085013567ffffffffffffffff811115613f0257600080fd5b613f0e87828801613a29565b91505092959194509250565b60008060408385031215613f2d57600080fd5b6000613f3b858286016137f1565b9250506020613f4c858286016139a0565b9150509250929050565b60008060408385031215613f6957600080fd5b6000613f77858286016137f1565b9250506020613f8885828601613b1b565b9150509250929050565b60008060008060008060808789031215613fab57600080fd5b6000613fb989828a016137f1565b9650506020613fca89828a01613b1b565b955050604087013567ffffffffffffffff811115613fe757600080fd5b613ff389828a01613a7d565b9450945050606087013567ffffffffffffffff81111561401257600080fd5b61401e89828a016139df565b92509250509295509295509295565b60008060006060848603121561404257600080fd5b6000614050868287016137f1565b935050602061406186828701613b1b565b925050604061407286828701613b1b565b9150509250925092565b6000806000806080858703121561409257600080fd5b60006140a0878288016137f1565b94505060206140b187828801613b1b565b93505060406140c287828801613b1b565b925050606085013567ffffffffffffffff8111156140df57600080fd5b6140eb87828801613a29565b91505092959194509250565b6000806040838503121561410a57600080fd5b600083013567ffffffffffffffff81111561412457600080fd5b61413085828601613806565b925050602083013567ffffffffffffffff81111561414d57600080fd5b6141598582860161391d565b9150509250929050565b6000806000806040858703121561417957600080fd5b600085013567ffffffffffffffff81111561419357600080fd5b61419f878288016138d3565b9450945050602085013567ffffffffffffffff8111156141be57600080fd5b6141ca87828801613889565b925092505092959194509250565b6000602082840312156141ea57600080fd5b60006141f8848285016139b5565b91505092915050565b60006020828403121561421357600080fd5b6000614221848285016139ca565b91505092915050565b60006020828403121561423c57600080fd5b600082013567ffffffffffffffff81111561425657600080fd5b61426284828501613ac7565b91505092915050565b60006020828403121561427d57600080fd5b600061428b84828501613b1b565b91505092915050565b600080604083850312156142a757600080fd5b60006142b585828601613b1b565b925050602083013567ffffffffffffffff8111156142d257600080fd5b6142de85828601613ac7565b9150509250929050565b60006142f48383614e38565b60208301905092915050565b61430981615518565b82525050565b600061431a826154a1565b61432481856154da565b935061432f8361547c565b8060005b8381101561436057815161434788826142e8565b9750614352836154cd565b925050600181019050614333565b5085935050505092915050565b6143768161552a565b82525050565b6000614387826154ac565b61439181856154eb565b93506143a181856020860161559b565b6143aa816155ce565b840191505092915050565b60006143c0826154c2565b6143ca81856154fc565b93506143da81856020860161559b565b6143e3816155ce565b840191505092915050565b60006143f9826154c2565b614403818561550d565b935061441381856020860161559b565b80840191505092915050565b600061442a826154b7565b61443481856154fc565b935061444481856020860161559b565b61444d816155ce565b840191505092915050565b600081546001811660008114614475576001811461449a576144de565b607f6002830416614486818761550d565b955060ff19831686528086019350506144de565b600282046144a8818761550d565b95506144b38561548c565b60005b828110156144d5578154818901526001820191506020810190506144b6565b82880195505050505b505092915050565b60006144f36034836154fc565b91507f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008301527f526563656976657220696d706c656d656e7465720000000000000000000000006020830152604082019050919050565b60006145596028836154fc565b91507f455243313135353a204552433131353552656365697665722072656a6563746560008301527f6420746f6b656e730000000000000000000000000000000000000000000000006020830152604082019050919050565b60006145bf602b836154fc565b91507f455243313135353a2062616c616e636520717565727920666f7220746865207a60008301527f65726f20616464726573730000000000000000000000000000000000000000006020830152604082019050919050565b60006146256026836154fc565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061468b601b836154fc565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006146cb6029836154fc565b91507f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008301527f20617070726f76656400000000000000000000000000000000000000000000006020830152604082019050919050565b60006147316027836154fc565b91507f455243313135354578742373657443726561746f723a20494e56414c49445f4160008301527f4444524553532e000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614797601e836154fc565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b60006147d7600c836154fc565b91507f5f757269206973206e756c6c00000000000000000000000000000000000000006000830152602082019050919050565b60006148176028836154fc565b91507f7175616e7469746965732e6c656e6774682073686f756c64206571205f75726960008301527f732e6c656e6774680000000000000000000000000000000000000000000000006020830152604082019050919050565b600061487d602a836154fc565b91507f455243313135354578742362617463684d696e743a204f4e4c595f435245415460008301527f4f525f414c4c4f574544000000000000000000000000000000000000000000006020830152604082019050919050565b60006148e36022836154fc565b91507f6964732e6c656e6774682073686f756c642065712076616c7565732e6c656e6760008301527f74680000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614949601d836154fc565b91507f7175616e7469746965732e6c656e6774682073686f756c6420677420300000006000830152602082019050919050565b60006149896025836154fc565b91507f455243313135353a207472616e7366657220746f20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006149ef6032836154fc565b91507f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008301527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006020830152604082019050919050565b6000614a556023836154fc565b91507f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614abb60058361550d565b91507f2e6a736f6e0000000000000000000000000000000000000000000000000000006000830152600582019050919050565b6000614afb6020836154fc565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614b3b602c836154fc565b91507f455243313135354578742363726561746f724f6e6c793a204f4e4c595f43524560008301527f41544f525f414c4c4f57454400000000000000000000000000000000000000006020830152604082019050919050565b6000614ba1601a836154fc565b91507f5f696e697469616c4f776e6572207a65726f20616464726573730000000000006000830152602082019050919050565b6000614be16029836154fc565b91507f455243313135353a2073657474696e6720617070726f76616c2073746174757360008301527f20666f722073656c6600000000000000000000000000000000000000000000006020830152604082019050919050565b6000614c476022836154fc565b91507f5f6964732e6c656e6774682073686f756c64206571205f757269732e6c656e6760008301527f74680000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614cad6029836154fc565b91507f455243313135353a206163636f756e747320616e6420696473206c656e67746860008301527f206d69736d6174636800000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d136028836154fc565b91507f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008301527f6d69736d617463680000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d796029836154fc565b91507f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008301527f697374656e7420696400000000000000000000000000000000000000000000006020830152604082019050919050565b6000614ddf6021836154fc565b91507f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b614e4181615582565b82525050565b614e5081615582565b82525050565b6000614e628285614458565b9150614e6e82846143ee565b9150614e7982614aae565b91508190509392505050565b6000602082019050614e9a6000830184614300565b92915050565b600060a082019050614eb56000830188614300565b614ec26020830187614300565b8181036040830152614ed4818661430f565b90508181036060830152614ee8818561430f565b90508181036080830152614efc818461437c565b90509695505050505050565b600060a082019050614f1d6000830188614300565b614f2a6020830187614300565b614f376040830186614e47565b614f446060830185614e47565b8181036080830152614f56818461437c565b90509695505050505050565b6000604082019050614f776000830185614300565b614f846020830184614e47565b9392505050565b60006020820190508181036000830152614fa5818461430f565b905092915050565b60006040820190508181036000830152614fc7818561430f565b90508181036020830152614fdb818461430f565b90509392505050565b6000602082019050614ff9600083018461436d565b92915050565b60006020820190508181036000830152615019818461441f565b905092915050565b6000602082019050818103600083015261503b81846143b5565b905092915050565b6000602082019050818103600083015261505c816144e6565b9050919050565b6000602082019050818103600083015261507c8161454c565b9050919050565b6000602082019050818103600083015261509c816145b2565b9050919050565b600060208201905081810360008301526150bc81614618565b9050919050565b600060208201905081810360008301526150dc8161467e565b9050919050565b600060208201905081810360008301526150fc816146be565b9050919050565b6000602082019050818103600083015261511c81614724565b9050919050565b6000602082019050818103600083015261513c8161478a565b9050919050565b6000602082019050818103600083015261515c816147ca565b9050919050565b6000602082019050818103600083015261517c8161480a565b9050919050565b6000602082019050818103600083015261519c81614870565b9050919050565b600060208201905081810360008301526151bc816148d6565b9050919050565b600060208201905081810360008301526151dc8161493c565b9050919050565b600060208201905081810360008301526151fc8161497c565b9050919050565b6000602082019050818103600083015261521c816149e2565b9050919050565b6000602082019050818103600083015261523c81614a48565b9050919050565b6000602082019050818103600083015261525c81614aee565b9050919050565b6000602082019050818103600083015261527c81614b2e565b9050919050565b6000602082019050818103600083015261529c81614b94565b9050919050565b600060208201905081810360008301526152bc81614bd4565b9050919050565b600060208201905081810360008301526152dc81614c3a565b9050919050565b600060208201905081810360008301526152fc81614ca0565b9050919050565b6000602082019050818103600083015261531c81614d06565b9050919050565b6000602082019050818103600083015261533c81614d6c565b9050919050565b6000602082019050818103600083015261535c81614dd2565b9050919050565b60006020820190506153786000830184614e47565b92915050565b60006040820190506153936000830185614e47565b6153a06020830184614e47565b9392505050565b6000604051905081810181811067ffffffffffffffff821117156153ca57600080fd5b8060405250919050565b600067ffffffffffffffff8211156153eb57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561541357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561543b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561546757600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061552382615562565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156155b957808201518184015260208101905061559e565b838111156155c8576000848401525b50505050565b6000601f19601f8301169050919050565b6155e881615518565b81146155f357600080fd5b50565b6155ff8161552a565b811461560a57600080fd5b50565b61561681615536565b811461562157600080fd5b50565b61562d81615582565b811461563857600080fd5b5056fe455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572a264697066735822122083ed9fac5a7c3e0cd8570b9ff5f0db10d01f16f35bedc95ff60f3b2d0759509d64736f6c63430006020033"

// DeployNft1155 deploys a new Ethereum contract, binding an instance of Nft1155 to it.
func DeployNft1155(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Nft1155, error) {
	parsed, err := abi.JSON(strings.NewReader(Nft1155ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Nft1155Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Nft1155{Nft1155Caller: Nft1155Caller{contract: contract}, Nft1155Transactor: Nft1155Transactor{contract: contract}, Nft1155Filterer: Nft1155Filterer{contract: contract}}, nil
}

// Nft1155 is an auto generated Go binding around an Ethereum contract.
type Nft1155 struct {
	Nft1155Caller     // Read-only binding to the contract
	Nft1155Transactor // Write-only binding to the contract
	Nft1155Filterer   // Log filterer for contract events
}

// Nft1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type Nft1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Nft1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Nft1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Nft1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Nft1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Nft1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Nft1155Session struct {
	Contract     *Nft1155          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Nft1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Nft1155CallerSession struct {
	Contract *Nft1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// Nft1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Nft1155TransactorSession struct {
	Contract     *Nft1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// Nft1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type Nft1155Raw struct {
	Contract *Nft1155 // Generic contract binding to access the raw methods on
}

// Nft1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Nft1155CallerRaw struct {
	Contract *Nft1155Caller // Generic read-only contract binding to access the raw methods on
}

// Nft1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Nft1155TransactorRaw struct {
	Contract *Nft1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewNft1155 creates a new instance of Nft1155, bound to a specific deployed contract.
func NewNft1155(address common.Address, backend bind.ContractBackend) (*Nft1155, error) {
	contract, err := bindNft1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Nft1155{Nft1155Caller: Nft1155Caller{contract: contract}, Nft1155Transactor: Nft1155Transactor{contract: contract}, Nft1155Filterer: Nft1155Filterer{contract: contract}}, nil
}

// NewNft1155Caller creates a new read-only instance of Nft1155, bound to a specific deployed contract.
func NewNft1155Caller(address common.Address, caller bind.ContractCaller) (*Nft1155Caller, error) {
	contract, err := bindNft1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Nft1155Caller{contract: contract}, nil
}

// NewNft1155Transactor creates a new write-only instance of Nft1155, bound to a specific deployed contract.
func NewNft1155Transactor(address common.Address, transactor bind.ContractTransactor) (*Nft1155Transactor, error) {
	contract, err := bindNft1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Nft1155Transactor{contract: contract}, nil
}

// NewNft1155Filterer creates a new log filterer instance of Nft1155, bound to a specific deployed contract.
func NewNft1155Filterer(address common.Address, filterer bind.ContractFilterer) (*Nft1155Filterer, error) {
	contract, err := bindNft1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Nft1155Filterer{contract: contract}, nil
}

// bindNft1155 binds a generic wrapper to an already deployed contract.
func bindNft1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Nft1155ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nft1155 *Nft1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nft1155.Contract.Nft1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nft1155 *Nft1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nft1155.Contract.Nft1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nft1155 *Nft1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nft1155.Contract.Nft1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nft1155 *Nft1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nft1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nft1155 *Nft1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nft1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nft1155 *Nft1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nft1155.Contract.contract.Transact(opts, method, params...)
}

// GetNextTokenID is a free data retrieval call binding the contract method 0x5bb5387e.
//
// Solidity: function _getNextTokenID() view returns(uint256)
func (_Nft1155 *Nft1155Caller) GetNextTokenID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "_getNextTokenID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNextTokenID is a free data retrieval call binding the contract method 0x5bb5387e.
//
// Solidity: function _getNextTokenID() view returns(uint256)
func (_Nft1155 *Nft1155Session) GetNextTokenID() (*big.Int, error) {
	return _Nft1155.Contract.GetNextTokenID(&_Nft1155.CallOpts)
}

// GetNextTokenID is a free data retrieval call binding the contract method 0x5bb5387e.
//
// Solidity: function _getNextTokenID() view returns(uint256)
func (_Nft1155 *Nft1155CallerSession) GetNextTokenID() (*big.Int, error) {
	return _Nft1155.Contract.GetNextTokenID(&_Nft1155.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Nft1155 *Nft1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Nft1155 *Nft1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Nft1155.Contract.BalanceOf(&_Nft1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Nft1155 *Nft1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Nft1155.Contract.BalanceOf(&_Nft1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Nft1155 *Nft1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Nft1155 *Nft1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Nft1155.Contract.BalanceOfBatch(&_Nft1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Nft1155 *Nft1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Nft1155.Contract.BalanceOfBatch(&_Nft1155.CallOpts, accounts, ids)
}

// Creators is a free data retrieval call binding the contract method 0xcd53d08e.
//
// Solidity: function creators(uint256 ) view returns(address)
func (_Nft1155 *Nft1155Caller) Creators(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "creators", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creators is a free data retrieval call binding the contract method 0xcd53d08e.
//
// Solidity: function creators(uint256 ) view returns(address)
func (_Nft1155 *Nft1155Session) Creators(arg0 *big.Int) (common.Address, error) {
	return _Nft1155.Contract.Creators(&_Nft1155.CallOpts, arg0)
}

// Creators is a free data retrieval call binding the contract method 0xcd53d08e.
//
// Solidity: function creators(uint256 ) view returns(address)
func (_Nft1155 *Nft1155CallerSession) Creators(arg0 *big.Int) (common.Address, error) {
	return _Nft1155.Contract.Creators(&_Nft1155.CallOpts, arg0)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Nft1155 *Nft1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Nft1155 *Nft1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Nft1155.Contract.IsApprovedForAll(&_Nft1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Nft1155 *Nft1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Nft1155.Contract.IsApprovedForAll(&_Nft1155.CallOpts, account, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Nft1155 *Nft1155Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Nft1155 *Nft1155Session) Name() (string, error) {
	return _Nft1155.Contract.Name(&_Nft1155.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Nft1155 *Nft1155CallerSession) Name() (string, error) {
	return _Nft1155.Contract.Name(&_Nft1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nft1155 *Nft1155Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nft1155 *Nft1155Session) Owner() (common.Address, error) {
	return _Nft1155.Contract.Owner(&_Nft1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nft1155 *Nft1155CallerSession) Owner() (common.Address, error) {
	return _Nft1155.Contract.Owner(&_Nft1155.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nft1155 *Nft1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nft1155 *Nft1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Nft1155.Contract.SupportsInterface(&_Nft1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nft1155 *Nft1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Nft1155.Contract.SupportsInterface(&_Nft1155.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Nft1155 *Nft1155Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Nft1155 *Nft1155Session) Symbol() (string, error) {
	return _Nft1155.Contract.Symbol(&_Nft1155.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Nft1155 *Nft1155CallerSession) Symbol() (string, error) {
	return _Nft1155.Contract.Symbol(&_Nft1155.CallOpts)
}

// TokenSupply is a free data retrieval call binding the contract method 0x2693ebf2.
//
// Solidity: function tokenSupply(uint256 ) view returns(uint256)
func (_Nft1155 *Nft1155Caller) TokenSupply(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "tokenSupply", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenSupply is a free data retrieval call binding the contract method 0x2693ebf2.
//
// Solidity: function tokenSupply(uint256 ) view returns(uint256)
func (_Nft1155 *Nft1155Session) TokenSupply(arg0 *big.Int) (*big.Int, error) {
	return _Nft1155.Contract.TokenSupply(&_Nft1155.CallOpts, arg0)
}

// TokenSupply is a free data retrieval call binding the contract method 0x2693ebf2.
//
// Solidity: function tokenSupply(uint256 ) view returns(uint256)
func (_Nft1155 *Nft1155CallerSession) TokenSupply(arg0 *big.Int) (*big.Int, error) {
	return _Nft1155.Contract.TokenSupply(&_Nft1155.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _id) view returns(string)
func (_Nft1155 *Nft1155Caller) Uri(opts *bind.CallOpts, _id *big.Int) (string, error) {
	var out []interface{}
	err := _Nft1155.contract.Call(opts, &out, "uri", _id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _id) view returns(string)
func (_Nft1155 *Nft1155Session) Uri(_id *big.Int) (string, error) {
	return _Nft1155.Contract.Uri(&_Nft1155.CallOpts, _id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _id) view returns(string)
func (_Nft1155 *Nft1155CallerSession) Uri(_id *big.Int) (string, error) {
	return _Nft1155.Contract.Uri(&_Nft1155.CallOpts, _id)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Nft1155 *Nft1155Transactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Nft1155 *Nft1155Session) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft1155.Contract.Burn(&_Nft1155.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Nft1155 *Nft1155TransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft1155.Contract.Burn(&_Nft1155.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Nft1155 *Nft1155Transactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Nft1155 *Nft1155Session) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Nft1155.Contract.BurnBatch(&_Nft1155.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Nft1155 *Nft1155TransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Nft1155.Contract.BurnBatch(&_Nft1155.TransactOpts, account, ids, values)
}

// Create is a paid mutator transaction binding the contract method 0xe38e3b24.
//
// Solidity: function create(address _initialOwner, uint256 _initialSupply, string _uri, bytes _data) returns(uint256)
func (_Nft1155 *Nft1155Transactor) Create(opts *bind.TransactOpts, _initialOwner common.Address, _initialSupply *big.Int, _uri string, _data []byte) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "create", _initialOwner, _initialSupply, _uri, _data)
}

// Create is a paid mutator transaction binding the contract method 0xe38e3b24.
//
// Solidity: function create(address _initialOwner, uint256 _initialSupply, string _uri, bytes _data) returns(uint256)
func (_Nft1155 *Nft1155Session) Create(_initialOwner common.Address, _initialSupply *big.Int, _uri string, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.Create(&_Nft1155.TransactOpts, _initialOwner, _initialSupply, _uri, _data)
}

// Create is a paid mutator transaction binding the contract method 0xe38e3b24.
//
// Solidity: function create(address _initialOwner, uint256 _initialSupply, string _uri, bytes _data) returns(uint256)
func (_Nft1155 *Nft1155TransactorSession) Create(_initialOwner common.Address, _initialSupply *big.Int, _uri string, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.Create(&_Nft1155.TransactOpts, _initialOwner, _initialSupply, _uri, _data)
}

// CreateBatch is a paid mutator transaction binding the contract method 0x43f79a8c.
//
// Solidity: function createBatch(address _initialOwner, uint256[] _quantities, string[] _uris, bytes _data) returns(uint256)
func (_Nft1155 *Nft1155Transactor) CreateBatch(opts *bind.TransactOpts, _initialOwner common.Address, _quantities []*big.Int, _uris []string, _data []byte) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "createBatch", _initialOwner, _quantities, _uris, _data)
}

// CreateBatch is a paid mutator transaction binding the contract method 0x43f79a8c.
//
// Solidity: function createBatch(address _initialOwner, uint256[] _quantities, string[] _uris, bytes _data) returns(uint256)
func (_Nft1155 *Nft1155Session) CreateBatch(_initialOwner common.Address, _quantities []*big.Int, _uris []string, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.CreateBatch(&_Nft1155.TransactOpts, _initialOwner, _quantities, _uris, _data)
}

// CreateBatch is a paid mutator transaction binding the contract method 0x43f79a8c.
//
// Solidity: function createBatch(address _initialOwner, uint256[] _quantities, string[] _uris, bytes _data) returns(uint256)
func (_Nft1155 *Nft1155TransactorSession) CreateBatch(_initialOwner common.Address, _quantities []*big.Int, _uris []string, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.CreateBatch(&_Nft1155.TransactOpts, _initialOwner, _quantities, _uris, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address _to, uint256 _id, uint256 _quantity, bytes _data) returns()
func (_Nft1155 *Nft1155Transactor) Mint(opts *bind.TransactOpts, _to common.Address, _id *big.Int, _quantity *big.Int, _data []byte) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "mint", _to, _id, _quantity, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address _to, uint256 _id, uint256 _quantity, bytes _data) returns()
func (_Nft1155 *Nft1155Session) Mint(_to common.Address, _id *big.Int, _quantity *big.Int, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.Mint(&_Nft1155.TransactOpts, _to, _id, _quantity, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address _to, uint256 _id, uint256 _quantity, bytes _data) returns()
func (_Nft1155 *Nft1155TransactorSession) Mint(_to common.Address, _id *big.Int, _quantity *big.Int, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.Mint(&_Nft1155.TransactOpts, _to, _id, _quantity, _data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address _to, uint256[] _ids, uint256[] _quantities, bytes _data) returns()
func (_Nft1155 *Nft1155Transactor) MintBatch(opts *bind.TransactOpts, _to common.Address, _ids []*big.Int, _quantities []*big.Int, _data []byte) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "mintBatch", _to, _ids, _quantities, _data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address _to, uint256[] _ids, uint256[] _quantities, bytes _data) returns()
func (_Nft1155 *Nft1155Session) MintBatch(_to common.Address, _ids []*big.Int, _quantities []*big.Int, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.MintBatch(&_Nft1155.TransactOpts, _to, _ids, _quantities, _data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x1f7fdffa.
//
// Solidity: function mintBatch(address _to, uint256[] _ids, uint256[] _quantities, bytes _data) returns()
func (_Nft1155 *Nft1155TransactorSession) MintBatch(_to common.Address, _ids []*big.Int, _quantities []*big.Int, _data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.MintBatch(&_Nft1155.TransactOpts, _to, _ids, _quantities, _data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Nft1155 *Nft1155Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Nft1155 *Nft1155Session) RenounceOwnership() (*types.Transaction, error) {
	return _Nft1155.Contract.RenounceOwnership(&_Nft1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Nft1155 *Nft1155TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Nft1155.Contract.RenounceOwnership(&_Nft1155.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Nft1155 *Nft1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Nft1155 *Nft1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.SafeBatchTransferFrom(&_Nft1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Nft1155 *Nft1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.SafeBatchTransferFrom(&_Nft1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Nft1155 *Nft1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Nft1155 *Nft1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.SafeTransferFrom(&_Nft1155.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Nft1155 *Nft1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Nft1155.Contract.SafeTransferFrom(&_Nft1155.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Nft1155 *Nft1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Nft1155 *Nft1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Nft1155.Contract.SetApprovalForAll(&_Nft1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Nft1155 *Nft1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Nft1155.Contract.SetApprovalForAll(&_Nft1155.TransactOpts, operator, approved)
}

// SetBaseMetadataURI is a paid mutator transaction binding the contract method 0x7e518ec8.
//
// Solidity: function setBaseMetadataURI(string _newBaseMetadataURI) returns()
func (_Nft1155 *Nft1155Transactor) SetBaseMetadataURI(opts *bind.TransactOpts, _newBaseMetadataURI string) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "setBaseMetadataURI", _newBaseMetadataURI)
}

// SetBaseMetadataURI is a paid mutator transaction binding the contract method 0x7e518ec8.
//
// Solidity: function setBaseMetadataURI(string _newBaseMetadataURI) returns()
func (_Nft1155 *Nft1155Session) SetBaseMetadataURI(_newBaseMetadataURI string) (*types.Transaction, error) {
	return _Nft1155.Contract.SetBaseMetadataURI(&_Nft1155.TransactOpts, _newBaseMetadataURI)
}

// SetBaseMetadataURI is a paid mutator transaction binding the contract method 0x7e518ec8.
//
// Solidity: function setBaseMetadataURI(string _newBaseMetadataURI) returns()
func (_Nft1155 *Nft1155TransactorSession) SetBaseMetadataURI(_newBaseMetadataURI string) (*types.Transaction, error) {
	return _Nft1155.Contract.SetBaseMetadataURI(&_Nft1155.TransactOpts, _newBaseMetadataURI)
}

// SetCreator is a paid mutator transaction binding the contract method 0xd2a6b51a.
//
// Solidity: function setCreator(address _to, uint256[] _ids) returns()
func (_Nft1155 *Nft1155Transactor) SetCreator(opts *bind.TransactOpts, _to common.Address, _ids []*big.Int) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "setCreator", _to, _ids)
}

// SetCreator is a paid mutator transaction binding the contract method 0xd2a6b51a.
//
// Solidity: function setCreator(address _to, uint256[] _ids) returns()
func (_Nft1155 *Nft1155Session) SetCreator(_to common.Address, _ids []*big.Int) (*types.Transaction, error) {
	return _Nft1155.Contract.SetCreator(&_Nft1155.TransactOpts, _to, _ids)
}

// SetCreator is a paid mutator transaction binding the contract method 0xd2a6b51a.
//
// Solidity: function setCreator(address _to, uint256[] _ids) returns()
func (_Nft1155 *Nft1155TransactorSession) SetCreator(_to common.Address, _ids []*big.Int) (*types.Transaction, error) {
	return _Nft1155.Contract.SetCreator(&_Nft1155.TransactOpts, _to, _ids)
}

// SetIdURI is a paid mutator transaction binding the contract method 0x8bf8e1a6.
//
// Solidity: function setIdURI(uint256 _id, string _uri) returns()
func (_Nft1155 *Nft1155Transactor) SetIdURI(opts *bind.TransactOpts, _id *big.Int, _uri string) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "setIdURI", _id, _uri)
}

// SetIdURI is a paid mutator transaction binding the contract method 0x8bf8e1a6.
//
// Solidity: function setIdURI(uint256 _id, string _uri) returns()
func (_Nft1155 *Nft1155Session) SetIdURI(_id *big.Int, _uri string) (*types.Transaction, error) {
	return _Nft1155.Contract.SetIdURI(&_Nft1155.TransactOpts, _id, _uri)
}

// SetIdURI is a paid mutator transaction binding the contract method 0x8bf8e1a6.
//
// Solidity: function setIdURI(uint256 _id, string _uri) returns()
func (_Nft1155 *Nft1155TransactorSession) SetIdURI(_id *big.Int, _uri string) (*types.Transaction, error) {
	return _Nft1155.Contract.SetIdURI(&_Nft1155.TransactOpts, _id, _uri)
}

// SetIdURIs is a paid mutator transaction binding the contract method 0xe1dbccfc.
//
// Solidity: function setIdURIs(uint256[] _ids, string[] _uris) returns()
func (_Nft1155 *Nft1155Transactor) SetIdURIs(opts *bind.TransactOpts, _ids []*big.Int, _uris []string) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "setIdURIs", _ids, _uris)
}

// SetIdURIs is a paid mutator transaction binding the contract method 0xe1dbccfc.
//
// Solidity: function setIdURIs(uint256[] _ids, string[] _uris) returns()
func (_Nft1155 *Nft1155Session) SetIdURIs(_ids []*big.Int, _uris []string) (*types.Transaction, error) {
	return _Nft1155.Contract.SetIdURIs(&_Nft1155.TransactOpts, _ids, _uris)
}

// SetIdURIs is a paid mutator transaction binding the contract method 0xe1dbccfc.
//
// Solidity: function setIdURIs(uint256[] _ids, string[] _uris) returns()
func (_Nft1155 *Nft1155TransactorSession) SetIdURIs(_ids []*big.Int, _uris []string) (*types.Transaction, error) {
	return _Nft1155.Contract.SetIdURIs(&_Nft1155.TransactOpts, _ids, _uris)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Nft1155 *Nft1155Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Nft1155.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Nft1155 *Nft1155Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Nft1155.Contract.TransferOwnership(&_Nft1155.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Nft1155 *Nft1155TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Nft1155.Contract.TransferOwnership(&_Nft1155.TransactOpts, newOwner)
}

// Nft1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Nft1155 contract.
type Nft1155ApprovalForAllIterator struct {
	Event *Nft1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155ApprovalForAll represents a ApprovalForAll event raised by the Nft1155 contract.
type Nft1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Nft1155 *Nft1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*Nft1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155ApprovalForAllIterator{contract: _Nft1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Nft1155 *Nft1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *Nft1155ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155ApprovalForAll)
				if err := _Nft1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Nft1155 *Nft1155Filterer) ParseApprovalForAll(log types.Log) (*Nft1155ApprovalForAll, error) {
	event := new(Nft1155ApprovalForAll)
	if err := _Nft1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nft1155CreateIterator is returned from FilterCreate and is used to iterate over the raw logs and unpacked data for Create events raised by the Nft1155 contract.
type Nft1155CreateIterator struct {
	Event *Nft1155Create // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155CreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155Create)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155Create)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155CreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155CreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155Create represents a Create event raised by the Nft1155 contract.
type Nft1155Create struct {
	Addr          common.Address
	InitialOwner  common.Address
	InitialSupply *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreate is a free log retrieval operation binding the contract event 0x923f1fa2c44c3aec741bc0bb74cfdb2d73d61ea532799cda54b2941d89ab9fc6.
//
// Solidity: event Create(address indexed addr, address _initialOwner, uint256 _initialSupply)
func (_Nft1155 *Nft1155Filterer) FilterCreate(opts *bind.FilterOpts, addr []common.Address) (*Nft1155CreateIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "Create", addrRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155CreateIterator{contract: _Nft1155.contract, event: "Create", logs: logs, sub: sub}, nil
}

// WatchCreate is a free log subscription operation binding the contract event 0x923f1fa2c44c3aec741bc0bb74cfdb2d73d61ea532799cda54b2941d89ab9fc6.
//
// Solidity: event Create(address indexed addr, address _initialOwner, uint256 _initialSupply)
func (_Nft1155 *Nft1155Filterer) WatchCreate(opts *bind.WatchOpts, sink chan<- *Nft1155Create, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "Create", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155Create)
				if err := _Nft1155.contract.UnpackLog(event, "Create", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreate is a log parse operation binding the contract event 0x923f1fa2c44c3aec741bc0bb74cfdb2d73d61ea532799cda54b2941d89ab9fc6.
//
// Solidity: event Create(address indexed addr, address _initialOwner, uint256 _initialSupply)
func (_Nft1155 *Nft1155Filterer) ParseCreate(log types.Log) (*Nft1155Create, error) {
	event := new(Nft1155Create)
	if err := _Nft1155.contract.UnpackLog(event, "Create", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nft1155CreateBatchIterator is returned from FilterCreateBatch and is used to iterate over the raw logs and unpacked data for CreateBatch events raised by the Nft1155 contract.
type Nft1155CreateBatchIterator struct {
	Event *Nft1155CreateBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155CreateBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155CreateBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155CreateBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155CreateBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155CreateBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155CreateBatch represents a CreateBatch event raised by the Nft1155 contract.
type Nft1155CreateBatch struct {
	Addr         common.Address
	InitialOwner common.Address
	Num          *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateBatch is a free log retrieval operation binding the contract event 0xe6d9be50040b772bb48a973239d5787f4f958dcfc8ed688b457964da2df91535.
//
// Solidity: event CreateBatch(address indexed addr, address _initialOwner, uint256 num)
func (_Nft1155 *Nft1155Filterer) FilterCreateBatch(opts *bind.FilterOpts, addr []common.Address) (*Nft1155CreateBatchIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "CreateBatch", addrRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155CreateBatchIterator{contract: _Nft1155.contract, event: "CreateBatch", logs: logs, sub: sub}, nil
}

// WatchCreateBatch is a free log subscription operation binding the contract event 0xe6d9be50040b772bb48a973239d5787f4f958dcfc8ed688b457964da2df91535.
//
// Solidity: event CreateBatch(address indexed addr, address _initialOwner, uint256 num)
func (_Nft1155 *Nft1155Filterer) WatchCreateBatch(opts *bind.WatchOpts, sink chan<- *Nft1155CreateBatch, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "CreateBatch", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155CreateBatch)
				if err := _Nft1155.contract.UnpackLog(event, "CreateBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateBatch is a log parse operation binding the contract event 0xe6d9be50040b772bb48a973239d5787f4f958dcfc8ed688b457964da2df91535.
//
// Solidity: event CreateBatch(address indexed addr, address _initialOwner, uint256 num)
func (_Nft1155 *Nft1155Filterer) ParseCreateBatch(log types.Log) (*Nft1155CreateBatch, error) {
	event := new(Nft1155CreateBatch)
	if err := _Nft1155.contract.UnpackLog(event, "CreateBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nft1155OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Nft1155 contract.
type Nft1155OwnershipTransferredIterator struct {
	Event *Nft1155OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155OwnershipTransferred represents a OwnershipTransferred event raised by the Nft1155 contract.
type Nft1155OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Nft1155 *Nft1155Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Nft1155OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155OwnershipTransferredIterator{contract: _Nft1155.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Nft1155 *Nft1155Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Nft1155OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155OwnershipTransferred)
				if err := _Nft1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Nft1155 *Nft1155Filterer) ParseOwnershipTransferred(log types.Log) (*Nft1155OwnershipTransferred, error) {
	event := new(Nft1155OwnershipTransferred)
	if err := _Nft1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nft1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Nft1155 contract.
type Nft1155TransferBatchIterator struct {
	Event *Nft1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155TransferBatch represents a TransferBatch event raised by the Nft1155 contract.
type Nft1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Nft1155 *Nft1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*Nft1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155TransferBatchIterator{contract: _Nft1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Nft1155 *Nft1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *Nft1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155TransferBatch)
				if err := _Nft1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Nft1155 *Nft1155Filterer) ParseTransferBatch(log types.Log) (*Nft1155TransferBatch, error) {
	event := new(Nft1155TransferBatch)
	if err := _Nft1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nft1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Nft1155 contract.
type Nft1155TransferSingleIterator struct {
	Event *Nft1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155TransferSingle represents a TransferSingle event raised by the Nft1155 contract.
type Nft1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Nft1155 *Nft1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*Nft1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155TransferSingleIterator{contract: _Nft1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Nft1155 *Nft1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *Nft1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155TransferSingle)
				if err := _Nft1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Nft1155 *Nft1155Filterer) ParseTransferSingle(log types.Log) (*Nft1155TransferSingle, error) {
	event := new(Nft1155TransferSingle)
	if err := _Nft1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nft1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Nft1155 contract.
type Nft1155URIIterator struct {
	Event *Nft1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nft1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nft1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nft1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nft1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nft1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nft1155URI represents a URI event raised by the Nft1155 contract.
type Nft1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Nft1155 *Nft1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*Nft1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Nft1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &Nft1155URIIterator{contract: _Nft1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Nft1155 *Nft1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *Nft1155URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Nft1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nft1155URI)
				if err := _Nft1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Nft1155 *Nft1155Filterer) ParseURI(log types.Log) (*Nft1155URI, error) {
	event := new(Nft1155URI)
	if err := _Nft1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
