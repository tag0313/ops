// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nftholder

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NftholderABI is the input ABI used to generate the binding from.
const NftholderABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"WithDrawBatchErc1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"WithDrawBatchErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"WithDrawBatchIdErc1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithDrawErc1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithDrawErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithDrawErc721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithDrawEth\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delMinter\",\"type\":\"address\"}],\"name\":\"delMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinterLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"transferBatchERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBatchERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"transferBatchIdERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// NftholderBin is the compiled bytecode used for deploying new contracts.
var NftholderBin = ""

// DeployNftholder deploys a new Ethereum contract, binding an instance of Nftholder to it.
func DeployNftholder(auth *bind.TransactOpts, backend bind.ContractBackend, governor_ common.Address) (common.Address, *types.Transaction, *Nftholder, error) {
	parsed, err := abi.JSON(strings.NewReader(NftholderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NftholderBin), backend, governor_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Nftholder{NftholderCaller: NftholderCaller{contract: contract}, NftholderTransactor: NftholderTransactor{contract: contract}, NftholderFilterer: NftholderFilterer{contract: contract}}, nil
}

// Nftholder is an auto generated Go binding around an Ethereum contract.
type Nftholder struct {
	NftholderCaller     // Read-only binding to the contract
	NftholderTransactor // Write-only binding to the contract
	NftholderFilterer   // Log filterer for contract events
}

// NftholderCaller is an auto generated read-only Go binding around an Ethereum contract.
type NftholderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftholderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NftholderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftholderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NftholderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftholderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NftholderSession struct {
	Contract     *Nftholder        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NftholderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NftholderCallerSession struct {
	Contract *NftholderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// NftholderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NftholderTransactorSession struct {
	Contract     *NftholderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NftholderRaw is an auto generated low-level Go binding around an Ethereum contract.
type NftholderRaw struct {
	Contract *Nftholder // Generic contract binding to access the raw methods on
}

// NftholderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NftholderCallerRaw struct {
	Contract *NftholderCaller // Generic read-only contract binding to access the raw methods on
}

// NftholderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NftholderTransactorRaw struct {
	Contract *NftholderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNftholder creates a new instance of Nftholder, bound to a specific deployed contract.
func NewNftholder(address common.Address, backend bind.ContractBackend) (*Nftholder, error) {
	contract, err := bindNftholder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Nftholder{NftholderCaller: NftholderCaller{contract: contract}, NftholderTransactor: NftholderTransactor{contract: contract}, NftholderFilterer: NftholderFilterer{contract: contract}}, nil
}

// NewNftholderCaller creates a new read-only instance of Nftholder, bound to a specific deployed contract.
func NewNftholderCaller(address common.Address, caller bind.ContractCaller) (*NftholderCaller, error) {
	contract, err := bindNftholder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NftholderCaller{contract: contract}, nil
}

// NewNftholderTransactor creates a new write-only instance of Nftholder, bound to a specific deployed contract.
func NewNftholderTransactor(address common.Address, transactor bind.ContractTransactor) (*NftholderTransactor, error) {
	contract, err := bindNftholder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NftholderTransactor{contract: contract}, nil
}

// NewNftholderFilterer creates a new log filterer instance of Nftholder, bound to a specific deployed contract.
func NewNftholderFilterer(address common.Address, filterer bind.ContractFilterer) (*NftholderFilterer, error) {
	contract, err := bindNftholder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NftholderFilterer{contract: contract}, nil
}

// bindNftholder binds a generic wrapper to an already deployed contract.
func bindNftholder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NftholderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nftholder *NftholderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nftholder.Contract.NftholderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nftholder *NftholderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftholder.Contract.NftholderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nftholder *NftholderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nftholder.Contract.NftholderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nftholder *NftholderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nftholder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nftholder *NftholderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftholder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nftholder *NftholderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nftholder.Contract.contract.Transact(opts, method, params...)
}

// GetMinter is a free data retrieval call binding the contract method 0x5b7121f8.
//
// Solidity: function getMinter(uint256 _index) view returns(address)
func (_Nftholder *NftholderCaller) GetMinter(opts *bind.CallOpts, _index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Nftholder.contract.Call(opts, &out, "getMinter", _index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMinter is a free data retrieval call binding the contract method 0x5b7121f8.
//
// Solidity: function getMinter(uint256 _index) view returns(address)
func (_Nftholder *NftholderSession) GetMinter(_index *big.Int) (common.Address, error) {
	return _Nftholder.Contract.GetMinter(&_Nftholder.CallOpts, _index)
}

// GetMinter is a free data retrieval call binding the contract method 0x5b7121f8.
//
// Solidity: function getMinter(uint256 _index) view returns(address)
func (_Nftholder *NftholderCallerSession) GetMinter(_index *big.Int) (common.Address, error) {
	return _Nftholder.Contract.GetMinter(&_Nftholder.CallOpts, _index)
}

// GetMinterLength is a free data retrieval call binding the contract method 0x0323aac7.
//
// Solidity: function getMinterLength() view returns(uint256)
func (_Nftholder *NftholderCaller) GetMinterLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Nftholder.contract.Call(opts, &out, "getMinterLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinterLength is a free data retrieval call binding the contract method 0x0323aac7.
//
// Solidity: function getMinterLength() view returns(uint256)
func (_Nftholder *NftholderSession) GetMinterLength() (*big.Int, error) {
	return _Nftholder.Contract.GetMinterLength(&_Nftholder.CallOpts)
}

// GetMinterLength is a free data retrieval call binding the contract method 0x0323aac7.
//
// Solidity: function getMinterLength() view returns(uint256)
func (_Nftholder *NftholderCallerSession) GetMinterLength() (*big.Int, error) {
	return _Nftholder.Contract.GetMinterLength(&_Nftholder.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_Nftholder *NftholderCaller) Governor(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Nftholder.contract.Call(opts, &out, "governor")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_Nftholder *NftholderSession) Governor() (common.Address, error) {
	return _Nftholder.Contract.Governor(&_Nftholder.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_Nftholder *NftholderCallerSession) Governor() (common.Address, error) {
	return _Nftholder.Contract.Governor(&_Nftholder.CallOpts)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_Nftholder *NftholderCaller) IsMinter(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Nftholder.contract.Call(opts, &out, "isMinter", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_Nftholder *NftholderSession) IsMinter(account common.Address) (bool, error) {
	return _Nftholder.Contract.IsMinter(&_Nftholder.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_Nftholder *NftholderCallerSession) IsMinter(account common.Address) (bool, error) {
	return _Nftholder.Contract.IsMinter(&_Nftholder.CallOpts, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nftholder *NftholderCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Nftholder.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nftholder *NftholderSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Nftholder.Contract.SupportsInterface(&_Nftholder.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nftholder *NftholderCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Nftholder.Contract.SupportsInterface(&_Nftholder.CallOpts, interfaceId)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address _addMinter) returns(bool)
func (_Nftholder *NftholderTransactor) AddMinter(opts *bind.TransactOpts, _addMinter common.Address) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "addMinter", _addMinter)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address _addMinter) returns(bool)
func (_Nftholder *NftholderSession) AddMinter(_addMinter common.Address) (*types.Transaction, error) {
	return _Nftholder.Contract.AddMinter(&_Nftholder.TransactOpts, _addMinter)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address _addMinter) returns(bool)
func (_Nftholder *NftholderTransactorSession) AddMinter(_addMinter common.Address) (*types.Transaction, error) {
	return _Nftholder.Contract.AddMinter(&_Nftholder.TransactOpts, _addMinter)
}

// DelMinter is a paid mutator transaction binding the contract method 0x23338b88.
//
// Solidity: function delMinter(address _delMinter) returns(bool)
func (_Nftholder *NftholderTransactor) DelMinter(opts *bind.TransactOpts, _delMinter common.Address) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "delMinter", _delMinter)
}

// DelMinter is a paid mutator transaction binding the contract method 0x23338b88.
//
// Solidity: function delMinter(address _delMinter) returns(bool)
func (_Nftholder *NftholderSession) DelMinter(_delMinter common.Address) (*types.Transaction, error) {
	return _Nftholder.Contract.DelMinter(&_Nftholder.TransactOpts, _delMinter)
}

// DelMinter is a paid mutator transaction binding the contract method 0x23338b88.
//
// Solidity: function delMinter(address _delMinter) returns(bool)
func (_Nftholder *NftholderTransactorSession) DelMinter(_delMinter common.Address) (*types.Transaction, error) {
	return _Nftholder.Contract.DelMinter(&_Nftholder.TransactOpts, _delMinter)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_Nftholder *NftholderTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_Nftholder *NftholderSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Nftholder.Contract.OnERC1155BatchReceived(&_Nftholder.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_Nftholder *NftholderTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Nftholder.Contract.OnERC1155BatchReceived(&_Nftholder.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_Nftholder *NftholderTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_Nftholder *NftholderSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Nftholder.Contract.OnERC1155Received(&_Nftholder.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_Nftholder *NftholderTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Nftholder.Contract.OnERC1155Received(&_Nftholder.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes ) returns(bytes4)
func (_Nftholder *NftholderTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "onERC721Received", operator, from, tokenId, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes ) returns(bytes4)
func (_Nftholder *NftholderSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Nftholder.Contract.OnERC721Received(&_Nftholder.TransactOpts, operator, from, tokenId, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes ) returns(bytes4)
func (_Nftholder *NftholderTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Nftholder.Contract.OnERC721Received(&_Nftholder.TransactOpts, operator, from, tokenId, arg3)
}

// RenounceGovernorship is a paid mutator transaction binding the contract method 0x81c0c263.
//
// Solidity: function renounceGovernorship() returns()
func (_Nftholder *NftholderTransactor) RenounceGovernorship(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "renounceGovernorship")
}

// RenounceGovernorship is a paid mutator transaction binding the contract method 0x81c0c263.
//
// Solidity: function renounceGovernorship() returns()
func (_Nftholder *NftholderSession) RenounceGovernorship() (*types.Transaction, error) {
	return _Nftholder.Contract.RenounceGovernorship(&_Nftholder.TransactOpts)
}

// RenounceGovernorship is a paid mutator transaction binding the contract method 0x81c0c263.
//
// Solidity: function renounceGovernorship() returns()
func (_Nftholder *NftholderTransactorSession) RenounceGovernorship() (*types.Transaction, error) {
	return _Nftholder.Contract.RenounceGovernorship(&_Nftholder.TransactOpts)
}

// TransferBatchERC1155 is a paid mutator transaction binding the contract method 0x2e6cbabc.
//
// Solidity: function transferBatchERC1155(address nftContract, address[] _tos, uint256 _id, uint256[] _quantities) returns()
func (_Nftholder *NftholderTransactor) TransferBatchERC1155(opts *bind.TransactOpts, nftContract common.Address, _tos []common.Address, _id *big.Int, _quantities []*big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferBatchERC1155", nftContract, _tos, _id, _quantities)
}

// TransferBatchERC1155 is a paid mutator transaction binding the contract method 0x2e6cbabc.
//
// Solidity: function transferBatchERC1155(address nftContract, address[] _tos, uint256 _id, uint256[] _quantities) returns()
func (_Nftholder *NftholderSession) TransferBatchERC1155(nftContract common.Address, _tos []common.Address, _id *big.Int, _quantities []*big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferBatchERC1155(&_Nftholder.TransactOpts, nftContract, _tos, _id, _quantities)
}

// TransferBatchERC1155 is a paid mutator transaction binding the contract method 0x2e6cbabc.
//
// Solidity: function transferBatchERC1155(address nftContract, address[] _tos, uint256 _id, uint256[] _quantities) returns()
func (_Nftholder *NftholderTransactorSession) TransferBatchERC1155(nftContract common.Address, _tos []common.Address, _id *big.Int, _quantities []*big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferBatchERC1155(&_Nftholder.TransactOpts, nftContract, _tos, _id, _quantities)
}

// TransferBatchERC20 is a paid mutator transaction binding the contract method 0x0fb6ac10.
//
// Solidity: function transferBatchERC20(address tokenContract, address[] _tos, uint256[] _amounts) returns()
func (_Nftholder *NftholderTransactor) TransferBatchERC20(opts *bind.TransactOpts, tokenContract common.Address, _tos []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferBatchERC20", tokenContract, _tos, _amounts)
}

// TransferBatchERC20 is a paid mutator transaction binding the contract method 0x0fb6ac10.
//
// Solidity: function transferBatchERC20(address tokenContract, address[] _tos, uint256[] _amounts) returns()
func (_Nftholder *NftholderSession) TransferBatchERC20(tokenContract common.Address, _tos []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferBatchERC20(&_Nftholder.TransactOpts, tokenContract, _tos, _amounts)
}

// TransferBatchERC20 is a paid mutator transaction binding the contract method 0x0fb6ac10.
//
// Solidity: function transferBatchERC20(address tokenContract, address[] _tos, uint256[] _amounts) returns()
func (_Nftholder *NftholderTransactorSession) TransferBatchERC20(tokenContract common.Address, _tos []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferBatchERC20(&_Nftholder.TransactOpts, tokenContract, _tos, _amounts)
}

// TransferBatchIdERC1155 is a paid mutator transaction binding the contract method 0xdbb5006b.
//
// Solidity: function transferBatchIdERC1155(address nftContract, address to, uint256[] _ids, uint256[] _quantities) returns()
func (_Nftholder *NftholderTransactor) TransferBatchIdERC1155(opts *bind.TransactOpts, nftContract common.Address, to common.Address, _ids []*big.Int, _quantities []*big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferBatchIdERC1155", nftContract, to, _ids, _quantities)
}

// TransferBatchIdERC1155 is a paid mutator transaction binding the contract method 0xdbb5006b.
//
// Solidity: function transferBatchIdERC1155(address nftContract, address to, uint256[] _ids, uint256[] _quantities) returns()
func (_Nftholder *NftholderSession) TransferBatchIdERC1155(nftContract common.Address, to common.Address, _ids []*big.Int, _quantities []*big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferBatchIdERC1155(&_Nftholder.TransactOpts, nftContract, to, _ids, _quantities)
}

// TransferBatchIdERC1155 is a paid mutator transaction binding the contract method 0xdbb5006b.
//
// Solidity: function transferBatchIdERC1155(address nftContract, address to, uint256[] _ids, uint256[] _quantities) returns()
func (_Nftholder *NftholderTransactorSession) TransferBatchIdERC1155(nftContract common.Address, to common.Address, _ids []*big.Int, _quantities []*big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferBatchIdERC1155(&_Nftholder.TransactOpts, nftContract, to, _ids, _quantities)
}

// TransferERC1155 is a paid mutator transaction binding the contract method 0x0a7e880c.
//
// Solidity: function transferERC1155(address nftContract, address to, uint256 id, uint256 amount) returns()
func (_Nftholder *NftholderTransactor) TransferERC1155(opts *bind.TransactOpts, nftContract common.Address, to common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferERC1155", nftContract, to, id, amount)
}

// TransferERC1155 is a paid mutator transaction binding the contract method 0x0a7e880c.
//
// Solidity: function transferERC1155(address nftContract, address to, uint256 id, uint256 amount) returns()
func (_Nftholder *NftholderSession) TransferERC1155(nftContract common.Address, to common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferERC1155(&_Nftholder.TransactOpts, nftContract, to, id, amount)
}

// TransferERC1155 is a paid mutator transaction binding the contract method 0x0a7e880c.
//
// Solidity: function transferERC1155(address nftContract, address to, uint256 id, uint256 amount) returns()
func (_Nftholder *NftholderTransactorSession) TransferERC1155(nftContract common.Address, to common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferERC1155(&_Nftholder.TransactOpts, nftContract, to, id, amount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x9db5dbe4.
//
// Solidity: function transferERC20(address tokenContract, address to, uint256 amount) returns()
func (_Nftholder *NftholderTransactor) TransferERC20(opts *bind.TransactOpts, tokenContract common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferERC20", tokenContract, to, amount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x9db5dbe4.
//
// Solidity: function transferERC20(address tokenContract, address to, uint256 amount) returns()
func (_Nftholder *NftholderSession) TransferERC20(tokenContract common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferERC20(&_Nftholder.TransactOpts, tokenContract, to, amount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x9db5dbe4.
//
// Solidity: function transferERC20(address tokenContract, address to, uint256 amount) returns()
func (_Nftholder *NftholderTransactorSession) TransferERC20(tokenContract common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferERC20(&_Nftholder.TransactOpts, tokenContract, to, amount)
}

// TransferERC721 is a paid mutator transaction binding the contract method 0x1aca6376.
//
// Solidity: function transferERC721(address nftContract, address to, uint256 tokenId) returns()
func (_Nftholder *NftholderTransactor) TransferERC721(opts *bind.TransactOpts, nftContract common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferERC721", nftContract, to, tokenId)
}

// TransferERC721 is a paid mutator transaction binding the contract method 0x1aca6376.
//
// Solidity: function transferERC721(address nftContract, address to, uint256 tokenId) returns()
func (_Nftholder *NftholderSession) TransferERC721(nftContract common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferERC721(&_Nftholder.TransactOpts, nftContract, to, tokenId)
}

// TransferERC721 is a paid mutator transaction binding the contract method 0x1aca6376.
//
// Solidity: function transferERC721(address nftContract, address to, uint256 tokenId) returns()
func (_Nftholder *NftholderTransactorSession) TransferERC721(nftContract common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferERC721(&_Nftholder.TransactOpts, nftContract, to, tokenId)
}

// TransferETH is a paid mutator transaction binding the contract method 0x7b1a4909.
//
// Solidity: function transferETH(address to, uint256 amount) payable returns()
func (_Nftholder *NftholderTransactor) TransferETH(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferETH", to, amount)
}

// TransferETH is a paid mutator transaction binding the contract method 0x7b1a4909.
//
// Solidity: function transferETH(address to, uint256 amount) payable returns()
func (_Nftholder *NftholderSession) TransferETH(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferETH(&_Nftholder.TransactOpts, to, amount)
}

// TransferETH is a paid mutator transaction binding the contract method 0x7b1a4909.
//
// Solidity: function transferETH(address to, uint256 amount) payable returns()
func (_Nftholder *NftholderTransactorSession) TransferETH(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferETH(&_Nftholder.TransactOpts, to, amount)
}

// TransferGovernorship is a paid mutator transaction binding the contract method 0xb6aa515b.
//
// Solidity: function transferGovernorship(address newGovernor) returns()
func (_Nftholder *NftholderTransactor) TransferGovernorship(opts *bind.TransactOpts, newGovernor common.Address) (*types.Transaction, error) {
	return _Nftholder.contract.Transact(opts, "transferGovernorship", newGovernor)
}

// TransferGovernorship is a paid mutator transaction binding the contract method 0xb6aa515b.
//
// Solidity: function transferGovernorship(address newGovernor) returns()
func (_Nftholder *NftholderSession) TransferGovernorship(newGovernor common.Address) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferGovernorship(&_Nftholder.TransactOpts, newGovernor)
}

// TransferGovernorship is a paid mutator transaction binding the contract method 0xb6aa515b.
//
// Solidity: function transferGovernorship(address newGovernor) returns()
func (_Nftholder *NftholderTransactorSession) TransferGovernorship(newGovernor common.Address) (*types.Transaction, error) {
	return _Nftholder.Contract.TransferGovernorship(&_Nftholder.TransactOpts, newGovernor)
}

// NftholderGovernorshipTransferredIterator is returned from FilterGovernorshipTransferred and is used to iterate over the raw logs and unpacked data for GovernorshipTransferred events raised by the Nftholder contract.
type NftholderGovernorshipTransferredIterator struct {
	Event *NftholderGovernorshipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderGovernorshipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderGovernorshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderGovernorshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderGovernorshipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderGovernorshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderGovernorshipTransferred represents a GovernorshipTransferred event raised by the Nftholder contract.
type NftholderGovernorshipTransferred struct {
	PreviousGovernor common.Address
	NewGovernor      common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterGovernorshipTransferred is a free log retrieval operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_Nftholder *NftholderFilterer) FilterGovernorshipTransferred(opts *bind.FilterOpts, previousGovernor []common.Address, newGovernor []common.Address) (*NftholderGovernorshipTransferredIterator, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "GovernorshipTransferred", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return &NftholderGovernorshipTransferredIterator{contract: _Nftholder.contract, event: "GovernorshipTransferred", logs: logs, sub: sub}, nil
}

// WatchGovernorshipTransferred is a free log subscription operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_Nftholder *NftholderFilterer) WatchGovernorshipTransferred(opts *bind.WatchOpts, sink chan<- *NftholderGovernorshipTransferred, previousGovernor []common.Address, newGovernor []common.Address) (event.Subscription, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "GovernorshipTransferred", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderGovernorshipTransferred)
				if err := _Nftholder.contract.UnpackLog(event, "GovernorshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernorshipTransferred is a log parse operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_Nftholder *NftholderFilterer) ParseGovernorshipTransferred(log types.Log) (*NftholderGovernorshipTransferred, error) {
	event := new(NftholderGovernorshipTransferred)
	if err := _Nftholder.contract.UnpackLog(event, "GovernorshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawBatchErc1155Iterator is returned from FilterWithDrawBatchErc1155 and is used to iterate over the raw logs and unpacked data for WithDrawBatchErc1155 events raised by the Nftholder contract.
type NftholderWithDrawBatchErc1155Iterator struct {
	Event *NftholderWithDrawBatchErc1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawBatchErc1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawBatchErc1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawBatchErc1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawBatchErc1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawBatchErc1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawBatchErc1155 represents a WithDrawBatchErc1155 event raised by the Nftholder contract.
type NftholderWithDrawBatchErc1155 struct {
	NftContract common.Address
	From        common.Address
	To          []common.Address
	Id          *big.Int
	Amount      []*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithDrawBatchErc1155 is a free log retrieval operation binding the contract event 0x29462248a435e0e2eaf24c31a0cfe8d0ecd136bd75744f623b511e0d06ec925f.
//
// Solidity: event WithDrawBatchErc1155(address nftContract, address from, address[] to, uint256 id, uint256[] amount)
func (_Nftholder *NftholderFilterer) FilterWithDrawBatchErc1155(opts *bind.FilterOpts) (*NftholderWithDrawBatchErc1155Iterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawBatchErc1155")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawBatchErc1155Iterator{contract: _Nftholder.contract, event: "WithDrawBatchErc1155", logs: logs, sub: sub}, nil
}

// WatchWithDrawBatchErc1155 is a free log subscription operation binding the contract event 0x29462248a435e0e2eaf24c31a0cfe8d0ecd136bd75744f623b511e0d06ec925f.
//
// Solidity: event WithDrawBatchErc1155(address nftContract, address from, address[] to, uint256 id, uint256[] amount)
func (_Nftholder *NftholderFilterer) WatchWithDrawBatchErc1155(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawBatchErc1155) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawBatchErc1155")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawBatchErc1155)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawBatchErc1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawBatchErc1155 is a log parse operation binding the contract event 0x29462248a435e0e2eaf24c31a0cfe8d0ecd136bd75744f623b511e0d06ec925f.
//
// Solidity: event WithDrawBatchErc1155(address nftContract, address from, address[] to, uint256 id, uint256[] amount)
func (_Nftholder *NftholderFilterer) ParseWithDrawBatchErc1155(log types.Log) (*NftholderWithDrawBatchErc1155, error) {
	event := new(NftholderWithDrawBatchErc1155)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawBatchErc1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawBatchErc20Iterator is returned from FilterWithDrawBatchErc20 and is used to iterate over the raw logs and unpacked data for WithDrawBatchErc20 events raised by the Nftholder contract.
type NftholderWithDrawBatchErc20Iterator struct {
	Event *NftholderWithDrawBatchErc20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawBatchErc20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawBatchErc20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawBatchErc20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawBatchErc20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawBatchErc20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawBatchErc20 represents a WithDrawBatchErc20 event raised by the Nftholder contract.
type NftholderWithDrawBatchErc20 struct {
	Erc20Contract common.Address
	From          common.Address
	To            []common.Address
	Amount        []*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWithDrawBatchErc20 is a free log retrieval operation binding the contract event 0x22fce7a265d382b1aaad5356cf7074cc7175ef95fa5c6aee4296a04f029cfab2.
//
// Solidity: event WithDrawBatchErc20(address erc20Contract, address from, address[] to, uint256[] amount)
func (_Nftholder *NftholderFilterer) FilterWithDrawBatchErc20(opts *bind.FilterOpts) (*NftholderWithDrawBatchErc20Iterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawBatchErc20")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawBatchErc20Iterator{contract: _Nftholder.contract, event: "WithDrawBatchErc20", logs: logs, sub: sub}, nil
}

// WatchWithDrawBatchErc20 is a free log subscription operation binding the contract event 0x22fce7a265d382b1aaad5356cf7074cc7175ef95fa5c6aee4296a04f029cfab2.
//
// Solidity: event WithDrawBatchErc20(address erc20Contract, address from, address[] to, uint256[] amount)
func (_Nftholder *NftholderFilterer) WatchWithDrawBatchErc20(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawBatchErc20) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawBatchErc20")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawBatchErc20)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawBatchErc20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawBatchErc20 is a log parse operation binding the contract event 0x22fce7a265d382b1aaad5356cf7074cc7175ef95fa5c6aee4296a04f029cfab2.
//
// Solidity: event WithDrawBatchErc20(address erc20Contract, address from, address[] to, uint256[] amount)
func (_Nftholder *NftholderFilterer) ParseWithDrawBatchErc20(log types.Log) (*NftholderWithDrawBatchErc20, error) {
	event := new(NftholderWithDrawBatchErc20)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawBatchErc20", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawBatchIdErc1155Iterator is returned from FilterWithDrawBatchIdErc1155 and is used to iterate over the raw logs and unpacked data for WithDrawBatchIdErc1155 events raised by the Nftholder contract.
type NftholderWithDrawBatchIdErc1155Iterator struct {
	Event *NftholderWithDrawBatchIdErc1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawBatchIdErc1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawBatchIdErc1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawBatchIdErc1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawBatchIdErc1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawBatchIdErc1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawBatchIdErc1155 represents a WithDrawBatchIdErc1155 event raised by the Nftholder contract.
type NftholderWithDrawBatchIdErc1155 struct {
	NftContract common.Address
	From        common.Address
	To          common.Address
	Ids         []*big.Int
	Amount      []*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithDrawBatchIdErc1155 is a free log retrieval operation binding the contract event 0xbbd25b6730984d42fc32809d40dce70e4bb32e5f163058874b1de63eb98b9986.
//
// Solidity: event WithDrawBatchIdErc1155(address nftContract, address from, address to, uint256[] ids, uint256[] amount)
func (_Nftholder *NftholderFilterer) FilterWithDrawBatchIdErc1155(opts *bind.FilterOpts) (*NftholderWithDrawBatchIdErc1155Iterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawBatchIdErc1155")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawBatchIdErc1155Iterator{contract: _Nftholder.contract, event: "WithDrawBatchIdErc1155", logs: logs, sub: sub}, nil
}

// WatchWithDrawBatchIdErc1155 is a free log subscription operation binding the contract event 0xbbd25b6730984d42fc32809d40dce70e4bb32e5f163058874b1de63eb98b9986.
//
// Solidity: event WithDrawBatchIdErc1155(address nftContract, address from, address to, uint256[] ids, uint256[] amount)
func (_Nftholder *NftholderFilterer) WatchWithDrawBatchIdErc1155(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawBatchIdErc1155) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawBatchIdErc1155")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawBatchIdErc1155)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawBatchIdErc1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawBatchIdErc1155 is a log parse operation binding the contract event 0xbbd25b6730984d42fc32809d40dce70e4bb32e5f163058874b1de63eb98b9986.
//
// Solidity: event WithDrawBatchIdErc1155(address nftContract, address from, address to, uint256[] ids, uint256[] amount)
func (_Nftholder *NftholderFilterer) ParseWithDrawBatchIdErc1155(log types.Log) (*NftholderWithDrawBatchIdErc1155, error) {
	event := new(NftholderWithDrawBatchIdErc1155)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawBatchIdErc1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawErc1155Iterator is returned from FilterWithDrawErc1155 and is used to iterate over the raw logs and unpacked data for WithDrawErc1155 events raised by the Nftholder contract.
type NftholderWithDrawErc1155Iterator struct {
	Event *NftholderWithDrawErc1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawErc1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawErc1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawErc1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawErc1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawErc1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawErc1155 represents a WithDrawErc1155 event raised by the Nftholder contract.
type NftholderWithDrawErc1155 struct {
	NftContract common.Address
	From        common.Address
	To          common.Address
	Id          *big.Int
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithDrawErc1155 is a free log retrieval operation binding the contract event 0xeef6388634c4d6403feca54670fd4bfec832423620cb403e61be0b7598313a3b.
//
// Solidity: event WithDrawErc1155(address nftContract, address from, address to, uint256 id, uint256 amount)
func (_Nftholder *NftholderFilterer) FilterWithDrawErc1155(opts *bind.FilterOpts) (*NftholderWithDrawErc1155Iterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawErc1155")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawErc1155Iterator{contract: _Nftholder.contract, event: "WithDrawErc1155", logs: logs, sub: sub}, nil
}

// WatchWithDrawErc1155 is a free log subscription operation binding the contract event 0xeef6388634c4d6403feca54670fd4bfec832423620cb403e61be0b7598313a3b.
//
// Solidity: event WithDrawErc1155(address nftContract, address from, address to, uint256 id, uint256 amount)
func (_Nftholder *NftholderFilterer) WatchWithDrawErc1155(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawErc1155) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawErc1155")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawErc1155)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawErc1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawErc1155 is a log parse operation binding the contract event 0xeef6388634c4d6403feca54670fd4bfec832423620cb403e61be0b7598313a3b.
//
// Solidity: event WithDrawErc1155(address nftContract, address from, address to, uint256 id, uint256 amount)
func (_Nftholder *NftholderFilterer) ParseWithDrawErc1155(log types.Log) (*NftholderWithDrawErc1155, error) {
	event := new(NftholderWithDrawErc1155)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawErc1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawErc20Iterator is returned from FilterWithDrawErc20 and is used to iterate over the raw logs and unpacked data for WithDrawErc20 events raised by the Nftholder contract.
type NftholderWithDrawErc20Iterator struct {
	Event *NftholderWithDrawErc20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawErc20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawErc20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawErc20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawErc20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawErc20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawErc20 represents a WithDrawErc20 event raised by the Nftholder contract.
type NftholderWithDrawErc20 struct {
	Erc20Contract common.Address
	From          common.Address
	To            common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWithDrawErc20 is a free log retrieval operation binding the contract event 0x572f944178898b45febaf04c96916e356c75b26a684593301a427f7ee77d7bbe.
//
// Solidity: event WithDrawErc20(address erc20Contract, address from, address to, uint256 amount)
func (_Nftholder *NftholderFilterer) FilterWithDrawErc20(opts *bind.FilterOpts) (*NftholderWithDrawErc20Iterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawErc20")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawErc20Iterator{contract: _Nftholder.contract, event: "WithDrawErc20", logs: logs, sub: sub}, nil
}

// WatchWithDrawErc20 is a free log subscription operation binding the contract event 0x572f944178898b45febaf04c96916e356c75b26a684593301a427f7ee77d7bbe.
//
// Solidity: event WithDrawErc20(address erc20Contract, address from, address to, uint256 amount)
func (_Nftholder *NftholderFilterer) WatchWithDrawErc20(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawErc20) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawErc20")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawErc20)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawErc20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawErc20 is a log parse operation binding the contract event 0x572f944178898b45febaf04c96916e356c75b26a684593301a427f7ee77d7bbe.
//
// Solidity: event WithDrawErc20(address erc20Contract, address from, address to, uint256 amount)
func (_Nftholder *NftholderFilterer) ParseWithDrawErc20(log types.Log) (*NftholderWithDrawErc20, error) {
	event := new(NftholderWithDrawErc20)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawErc20", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawErc721Iterator is returned from FilterWithDrawErc721 and is used to iterate over the raw logs and unpacked data for WithDrawErc721 events raised by the Nftholder contract.
type NftholderWithDrawErc721Iterator struct {
	Event *NftholderWithDrawErc721 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawErc721Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawErc721)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawErc721)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawErc721Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawErc721Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawErc721 represents a WithDrawErc721 event raised by the Nftholder contract.
type NftholderWithDrawErc721 struct {
	NftContract common.Address
	From        common.Address
	To          common.Address
	TokenId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithDrawErc721 is a free log retrieval operation binding the contract event 0xd4e1aeb82247d64a66a01b56a5aeabd0a7a07571be455d256cb3e74b490c0fd9.
//
// Solidity: event WithDrawErc721(address nftContract, address from, address to, uint256 tokenId)
func (_Nftholder *NftholderFilterer) FilterWithDrawErc721(opts *bind.FilterOpts) (*NftholderWithDrawErc721Iterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawErc721")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawErc721Iterator{contract: _Nftholder.contract, event: "WithDrawErc721", logs: logs, sub: sub}, nil
}

// WatchWithDrawErc721 is a free log subscription operation binding the contract event 0xd4e1aeb82247d64a66a01b56a5aeabd0a7a07571be455d256cb3e74b490c0fd9.
//
// Solidity: event WithDrawErc721(address nftContract, address from, address to, uint256 tokenId)
func (_Nftholder *NftholderFilterer) WatchWithDrawErc721(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawErc721) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawErc721")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawErc721)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawErc721", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawErc721 is a log parse operation binding the contract event 0xd4e1aeb82247d64a66a01b56a5aeabd0a7a07571be455d256cb3e74b490c0fd9.
//
// Solidity: event WithDrawErc721(address nftContract, address from, address to, uint256 tokenId)
func (_Nftholder *NftholderFilterer) ParseWithDrawErc721(log types.Log) (*NftholderWithDrawErc721, error) {
	event := new(NftholderWithDrawErc721)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawErc721", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftholderWithDrawEthIterator is returned from FilterWithDrawEth and is used to iterate over the raw logs and unpacked data for WithDrawEth events raised by the Nftholder contract.
type NftholderWithDrawEthIterator struct {
	Event *NftholderWithDrawEth // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftholderWithDrawEthIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftholderWithDrawEth)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftholderWithDrawEth)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftholderWithDrawEthIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftholderWithDrawEthIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftholderWithDrawEth represents a WithDrawEth event raised by the Nftholder contract.
type NftholderWithDrawEth struct {
	Add    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithDrawEth is a free log retrieval operation binding the contract event 0xc0caae405ca6aa2ebd00995886766957a5100fb2a1246ff639730f27cfbdbc11.
//
// Solidity: event WithDrawEth(address add, uint256 amount)
func (_Nftholder *NftholderFilterer) FilterWithDrawEth(opts *bind.FilterOpts) (*NftholderWithDrawEthIterator, error) {

	logs, sub, err := _Nftholder.contract.FilterLogs(opts, "WithDrawEth")
	if err != nil {
		return nil, err
	}
	return &NftholderWithDrawEthIterator{contract: _Nftholder.contract, event: "WithDrawEth", logs: logs, sub: sub}, nil
}

// WatchWithDrawEth is a free log subscription operation binding the contract event 0xc0caae405ca6aa2ebd00995886766957a5100fb2a1246ff639730f27cfbdbc11.
//
// Solidity: event WithDrawEth(address add, uint256 amount)
func (_Nftholder *NftholderFilterer) WatchWithDrawEth(opts *bind.WatchOpts, sink chan<- *NftholderWithDrawEth) (event.Subscription, error) {

	logs, sub, err := _Nftholder.contract.WatchLogs(opts, "WithDrawEth")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftholderWithDrawEth)
				if err := _Nftholder.contract.UnpackLog(event, "WithDrawEth", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithDrawEth is a log parse operation binding the contract event 0xc0caae405ca6aa2ebd00995886766957a5100fb2a1246ff639730f27cfbdbc11.
//
// Solidity: event WithDrawEth(address add, uint256 amount)
func (_Nftholder *NftholderFilterer) ParseWithDrawEth(log types.Log) (*NftholderWithDrawEth, error) {
	event := new(NftholderWithDrawEth)
	if err := _Nftholder.contract.UnpackLog(event, "WithDrawEth", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
