// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/userRegister/userRegister.proto

package pbUserRegister

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserRegister service

func NewUserRegisterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserRegister service

type UserRegisterService interface {
	GenerateMessage(ctx context.Context, in *PublickeyAddr, opts ...client.CallOption) (*RandomCode, error)
	GenerateToken(ctx context.Context, in *EncryptedValue, opts ...client.CallOption) (*Token, error)
}

type userRegisterService struct {
	c    client.Client
	name string
}

func NewUserRegisterService(name string, c client.Client) UserRegisterService {
	return &userRegisterService{
		c:    c,
		name: name,
	}
}

func (c *userRegisterService) GenerateMessage(ctx context.Context, in *PublickeyAddr, opts ...client.CallOption) (*RandomCode, error) {
	req := c.c.NewRequest(c.name, "UserRegister.GenerateMessage", in)
	out := new(RandomCode)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterService) GenerateToken(ctx context.Context, in *EncryptedValue, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "UserRegister.GenerateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRegister service

type UserRegisterHandler interface {
	GenerateMessage(context.Context, *PublickeyAddr, *RandomCode) error
	GenerateToken(context.Context, *EncryptedValue, *Token) error
}

func RegisterUserRegisterHandler(s server.Server, hdlr UserRegisterHandler, opts ...server.HandlerOption) error {
	type userRegister interface {
		GenerateMessage(ctx context.Context, in *PublickeyAddr, out *RandomCode) error
		GenerateToken(ctx context.Context, in *EncryptedValue, out *Token) error
	}
	type UserRegister struct {
		userRegister
	}
	h := &userRegisterHandler{hdlr}
	return s.Handle(s.NewHandler(&UserRegister{h}, opts...))
}

type userRegisterHandler struct {
	UserRegisterHandler
}

func (h *userRegisterHandler) GenerateMessage(ctx context.Context, in *PublickeyAddr, out *RandomCode) error {
	return h.UserRegisterHandler.GenerateMessage(ctx, in, out)
}

func (h *userRegisterHandler) GenerateToken(ctx context.Context, in *EncryptedValue, out *Token) error {
	return h.UserRegisterHandler.GenerateToken(ctx, in, out)
}
