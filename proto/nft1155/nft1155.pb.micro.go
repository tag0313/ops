// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/nft1155/nft1155.proto

package pbNft1155

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NFT1155 service

func NewNFT1155Endpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NFT1155 service

type NFT1155Service interface {
	//reading methods
	Name(ctx context.Context, in *NameRequest, opts ...client.CallOption) (*NameResponse, error)
	Symbol(ctx context.Context, in *SymbolRequest, opts ...client.CallOption) (*SymbolResponse, error)
	Owner(ctx context.Context, in *OwnerRequest, opts ...client.CallOption) (*OwnerResponse, error)
	TokenSupply(ctx context.Context, in *TokenSupplyRequest, opts ...client.CallOption) (*TokenSupplyResponse, error)
	Uri(ctx context.Context, in *UriRequest, opts ...client.CallOption) (*UriResponse, error)
	BalanceOf(ctx context.Context, in *BalanceOfRequest, opts ...client.CallOption) (*BalanceOfResponse, error)
	BalanceOfBatch(ctx context.Context, in *BalanceOfBatchRequest, opts ...client.CallOption) (*BalanceOfBatchResponse, error)
	GetNextTokenID(ctx context.Context, in *GetNextTokenIDRequest, opts ...client.CallOption) (*GetNextTokenIDResponse, error)
	IsApprovedForAll(ctx context.Context, in *IsApprovedForAllRequest, opts ...client.CallOption) (*IsApprovedForAllResponse, error)
	//Writing methods
	SafeTransferFrom(ctx context.Context, in *SafeTransferFromRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	SafeBatchTransferFrom(ctx context.Context, in *SafeBatchTransferFromRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	SetApprovalForAll(ctx context.Context, in *SetApprovalForAllRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	//Governance methods
	// 重置NFT url统一前缀
	SetBaseMetadataURI(ctx context.Context, in *SetBaseMetadataURIRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	// 创建一类新资产
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	//批量创建新资产
	CreateBatch(ctx context.Context, in *CreateBatchRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	// 转移管理者权限到newGovernor地址
	TransferGovernorship(ctx context.Context, in *TransferGovernorshipRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	//资产类别为_id(资产类别需要事先创建) 增发_quantity数量给_to
	Mint(ctx context.Context, in *MintRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	//资产类别为_id(资产类别需要事先创建) 批量增发_quantity数量给_to
	MintBatch(ctx context.Context, in *MintBatchRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	// 将增发资产类别为_id数组的权限转移给_to
	SetCreator(ctx context.Context, in *SetCreatorRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	// 设置_id资产类型的url
	SetIdURI(ctx context.Context, in *SetIdURIRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	//批量设置_id资产类型的url
	SetIdURIs(ctx context.Context, in *SetIdURIsRequest, opts ...client.CallOption) (*WritingMethodResponse, error)
	//holder
	TransferBatchID(ctx context.Context, in *TransferBatchIDReq, opts ...client.CallOption) (*WritingMethodResponse, error)
	TransferERC20(ctx context.Context, in *TransferERC20Request, opts ...client.CallOption) (*WritingMethodResponse, error)
	GetCreateBatchPrice(ctx context.Context, in *CreateBatchRequest, opts ...client.CallOption) (*GasFeeResponse, error)
	GetTransferBatchIDPrice(ctx context.Context, in *TransferBatchIDReq, opts ...client.CallOption) (*GasFeeResponse, error)
	GetTransferERC20Price(ctx context.Context, in *TransferERC20Request, opts ...client.CallOption) (*GasFeeResponse, error)
	GetTransactionByHash(ctx context.Context, in *GetTransactionByHashReq, opts ...client.CallOption) (*GetTransactionByHashResponse, error)
}

type nFT1155Service struct {
	c    client.Client
	name string
}

func NewNFT1155Service(name string, c client.Client) NFT1155Service {
	return &nFT1155Service{
		c:    c,
		name: name,
	}
}

func (c *nFT1155Service) Name(ctx context.Context, in *NameRequest, opts ...client.CallOption) (*NameResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.Name", in)
	out := new(NameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) Symbol(ctx context.Context, in *SymbolRequest, opts ...client.CallOption) (*SymbolResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.Symbol", in)
	out := new(SymbolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) Owner(ctx context.Context, in *OwnerRequest, opts ...client.CallOption) (*OwnerResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.Owner", in)
	out := new(OwnerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) TokenSupply(ctx context.Context, in *TokenSupplyRequest, opts ...client.CallOption) (*TokenSupplyResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.TokenSupply", in)
	out := new(TokenSupplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) Uri(ctx context.Context, in *UriRequest, opts ...client.CallOption) (*UriResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.Uri", in)
	out := new(UriResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) BalanceOf(ctx context.Context, in *BalanceOfRequest, opts ...client.CallOption) (*BalanceOfResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.BalanceOf", in)
	out := new(BalanceOfResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) BalanceOfBatch(ctx context.Context, in *BalanceOfBatchRequest, opts ...client.CallOption) (*BalanceOfBatchResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.BalanceOfBatch", in)
	out := new(BalanceOfBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) GetNextTokenID(ctx context.Context, in *GetNextTokenIDRequest, opts ...client.CallOption) (*GetNextTokenIDResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.GetNextTokenID", in)
	out := new(GetNextTokenIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) IsApprovedForAll(ctx context.Context, in *IsApprovedForAllRequest, opts ...client.CallOption) (*IsApprovedForAllResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.IsApprovedForAll", in)
	out := new(IsApprovedForAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SafeTransferFrom(ctx context.Context, in *SafeTransferFromRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SafeTransferFrom", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SafeBatchTransferFrom(ctx context.Context, in *SafeBatchTransferFromRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SafeBatchTransferFrom", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SetApprovalForAll(ctx context.Context, in *SetApprovalForAllRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SetApprovalForAll", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SetBaseMetadataURI(ctx context.Context, in *SetBaseMetadataURIRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SetBaseMetadataURI", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.Create", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) CreateBatch(ctx context.Context, in *CreateBatchRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.CreateBatch", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) TransferGovernorship(ctx context.Context, in *TransferGovernorshipRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.TransferGovernorship", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) Mint(ctx context.Context, in *MintRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.Mint", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) MintBatch(ctx context.Context, in *MintBatchRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.MintBatch", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SetCreator(ctx context.Context, in *SetCreatorRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SetCreator", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SetIdURI(ctx context.Context, in *SetIdURIRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SetIdURI", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) SetIdURIs(ctx context.Context, in *SetIdURIsRequest, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.SetIdURIs", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) TransferBatchID(ctx context.Context, in *TransferBatchIDReq, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.TransferBatchID", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) TransferERC20(ctx context.Context, in *TransferERC20Request, opts ...client.CallOption) (*WritingMethodResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.TransferERC20", in)
	out := new(WritingMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) GetCreateBatchPrice(ctx context.Context, in *CreateBatchRequest, opts ...client.CallOption) (*GasFeeResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.GetCreateBatchPrice", in)
	out := new(GasFeeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) GetTransferBatchIDPrice(ctx context.Context, in *TransferBatchIDReq, opts ...client.CallOption) (*GasFeeResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.GetTransferBatchIDPrice", in)
	out := new(GasFeeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) GetTransferERC20Price(ctx context.Context, in *TransferERC20Request, opts ...client.CallOption) (*GasFeeResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.GetTransferERC20Price", in)
	out := new(GasFeeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFT1155Service) GetTransactionByHash(ctx context.Context, in *GetTransactionByHashReq, opts ...client.CallOption) (*GetTransactionByHashResponse, error) {
	req := c.c.NewRequest(c.name, "NFT1155.GetTransactionByHash", in)
	out := new(GetTransactionByHashResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NFT1155 service

type NFT1155Handler interface {
	//reading methods
	Name(context.Context, *NameRequest, *NameResponse) error
	Symbol(context.Context, *SymbolRequest, *SymbolResponse) error
	Owner(context.Context, *OwnerRequest, *OwnerResponse) error
	TokenSupply(context.Context, *TokenSupplyRequest, *TokenSupplyResponse) error
	Uri(context.Context, *UriRequest, *UriResponse) error
	BalanceOf(context.Context, *BalanceOfRequest, *BalanceOfResponse) error
	BalanceOfBatch(context.Context, *BalanceOfBatchRequest, *BalanceOfBatchResponse) error
	GetNextTokenID(context.Context, *GetNextTokenIDRequest, *GetNextTokenIDResponse) error
	IsApprovedForAll(context.Context, *IsApprovedForAllRequest, *IsApprovedForAllResponse) error
	//Writing methods
	SafeTransferFrom(context.Context, *SafeTransferFromRequest, *WritingMethodResponse) error
	SafeBatchTransferFrom(context.Context, *SafeBatchTransferFromRequest, *WritingMethodResponse) error
	SetApprovalForAll(context.Context, *SetApprovalForAllRequest, *WritingMethodResponse) error
	//Governance methods
	// 重置NFT url统一前缀
	SetBaseMetadataURI(context.Context, *SetBaseMetadataURIRequest, *WritingMethodResponse) error
	// 创建一类新资产
	Create(context.Context, *CreateRequest, *WritingMethodResponse) error
	//批量创建新资产
	CreateBatch(context.Context, *CreateBatchRequest, *WritingMethodResponse) error
	// 转移管理者权限到newGovernor地址
	TransferGovernorship(context.Context, *TransferGovernorshipRequest, *WritingMethodResponse) error
	//资产类别为_id(资产类别需要事先创建) 增发_quantity数量给_to
	Mint(context.Context, *MintRequest, *WritingMethodResponse) error
	//资产类别为_id(资产类别需要事先创建) 批量增发_quantity数量给_to
	MintBatch(context.Context, *MintBatchRequest, *WritingMethodResponse) error
	// 将增发资产类别为_id数组的权限转移给_to
	SetCreator(context.Context, *SetCreatorRequest, *WritingMethodResponse) error
	// 设置_id资产类型的url
	SetIdURI(context.Context, *SetIdURIRequest, *WritingMethodResponse) error
	//批量设置_id资产类型的url
	SetIdURIs(context.Context, *SetIdURIsRequest, *WritingMethodResponse) error
	//holder
	TransferBatchID(context.Context, *TransferBatchIDReq, *WritingMethodResponse) error
	TransferERC20(context.Context, *TransferERC20Request, *WritingMethodResponse) error
	GetCreateBatchPrice(context.Context, *CreateBatchRequest, *GasFeeResponse) error
	GetTransferBatchIDPrice(context.Context, *TransferBatchIDReq, *GasFeeResponse) error
	GetTransferERC20Price(context.Context, *TransferERC20Request, *GasFeeResponse) error
	GetTransactionByHash(context.Context, *GetTransactionByHashReq, *GetTransactionByHashResponse) error
}

func RegisterNFT1155Handler(s server.Server, hdlr NFT1155Handler, opts ...server.HandlerOption) error {
	type nFT1155 interface {
		Name(ctx context.Context, in *NameRequest, out *NameResponse) error
		Symbol(ctx context.Context, in *SymbolRequest, out *SymbolResponse) error
		Owner(ctx context.Context, in *OwnerRequest, out *OwnerResponse) error
		TokenSupply(ctx context.Context, in *TokenSupplyRequest, out *TokenSupplyResponse) error
		Uri(ctx context.Context, in *UriRequest, out *UriResponse) error
		BalanceOf(ctx context.Context, in *BalanceOfRequest, out *BalanceOfResponse) error
		BalanceOfBatch(ctx context.Context, in *BalanceOfBatchRequest, out *BalanceOfBatchResponse) error
		GetNextTokenID(ctx context.Context, in *GetNextTokenIDRequest, out *GetNextTokenIDResponse) error
		IsApprovedForAll(ctx context.Context, in *IsApprovedForAllRequest, out *IsApprovedForAllResponse) error
		SafeTransferFrom(ctx context.Context, in *SafeTransferFromRequest, out *WritingMethodResponse) error
		SafeBatchTransferFrom(ctx context.Context, in *SafeBatchTransferFromRequest, out *WritingMethodResponse) error
		SetApprovalForAll(ctx context.Context, in *SetApprovalForAllRequest, out *WritingMethodResponse) error
		SetBaseMetadataURI(ctx context.Context, in *SetBaseMetadataURIRequest, out *WritingMethodResponse) error
		Create(ctx context.Context, in *CreateRequest, out *WritingMethodResponse) error
		CreateBatch(ctx context.Context, in *CreateBatchRequest, out *WritingMethodResponse) error
		TransferGovernorship(ctx context.Context, in *TransferGovernorshipRequest, out *WritingMethodResponse) error
		Mint(ctx context.Context, in *MintRequest, out *WritingMethodResponse) error
		MintBatch(ctx context.Context, in *MintBatchRequest, out *WritingMethodResponse) error
		SetCreator(ctx context.Context, in *SetCreatorRequest, out *WritingMethodResponse) error
		SetIdURI(ctx context.Context, in *SetIdURIRequest, out *WritingMethodResponse) error
		SetIdURIs(ctx context.Context, in *SetIdURIsRequest, out *WritingMethodResponse) error
		TransferBatchID(ctx context.Context, in *TransferBatchIDReq, out *WritingMethodResponse) error
		TransferERC20(ctx context.Context, in *TransferERC20Request, out *WritingMethodResponse) error
		GetCreateBatchPrice(ctx context.Context, in *CreateBatchRequest, out *GasFeeResponse) error
		GetTransferBatchIDPrice(ctx context.Context, in *TransferBatchIDReq, out *GasFeeResponse) error
		GetTransferERC20Price(ctx context.Context, in *TransferERC20Request, out *GasFeeResponse) error
		GetTransactionByHash(ctx context.Context, in *GetTransactionByHashReq, out *GetTransactionByHashResponse) error
	}
	type NFT1155 struct {
		nFT1155
	}
	h := &nFT1155Handler{hdlr}
	return s.Handle(s.NewHandler(&NFT1155{h}, opts...))
}

type nFT1155Handler struct {
	NFT1155Handler
}

func (h *nFT1155Handler) Name(ctx context.Context, in *NameRequest, out *NameResponse) error {
	return h.NFT1155Handler.Name(ctx, in, out)
}

func (h *nFT1155Handler) Symbol(ctx context.Context, in *SymbolRequest, out *SymbolResponse) error {
	return h.NFT1155Handler.Symbol(ctx, in, out)
}

func (h *nFT1155Handler) Owner(ctx context.Context, in *OwnerRequest, out *OwnerResponse) error {
	return h.NFT1155Handler.Owner(ctx, in, out)
}

func (h *nFT1155Handler) TokenSupply(ctx context.Context, in *TokenSupplyRequest, out *TokenSupplyResponse) error {
	return h.NFT1155Handler.TokenSupply(ctx, in, out)
}

func (h *nFT1155Handler) Uri(ctx context.Context, in *UriRequest, out *UriResponse) error {
	return h.NFT1155Handler.Uri(ctx, in, out)
}

func (h *nFT1155Handler) BalanceOf(ctx context.Context, in *BalanceOfRequest, out *BalanceOfResponse) error {
	return h.NFT1155Handler.BalanceOf(ctx, in, out)
}

func (h *nFT1155Handler) BalanceOfBatch(ctx context.Context, in *BalanceOfBatchRequest, out *BalanceOfBatchResponse) error {
	return h.NFT1155Handler.BalanceOfBatch(ctx, in, out)
}

func (h *nFT1155Handler) GetNextTokenID(ctx context.Context, in *GetNextTokenIDRequest, out *GetNextTokenIDResponse) error {
	return h.NFT1155Handler.GetNextTokenID(ctx, in, out)
}

func (h *nFT1155Handler) IsApprovedForAll(ctx context.Context, in *IsApprovedForAllRequest, out *IsApprovedForAllResponse) error {
	return h.NFT1155Handler.IsApprovedForAll(ctx, in, out)
}

func (h *nFT1155Handler) SafeTransferFrom(ctx context.Context, in *SafeTransferFromRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SafeTransferFrom(ctx, in, out)
}

func (h *nFT1155Handler) SafeBatchTransferFrom(ctx context.Context, in *SafeBatchTransferFromRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SafeBatchTransferFrom(ctx, in, out)
}

func (h *nFT1155Handler) SetApprovalForAll(ctx context.Context, in *SetApprovalForAllRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SetApprovalForAll(ctx, in, out)
}

func (h *nFT1155Handler) SetBaseMetadataURI(ctx context.Context, in *SetBaseMetadataURIRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SetBaseMetadataURI(ctx, in, out)
}

func (h *nFT1155Handler) Create(ctx context.Context, in *CreateRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.Create(ctx, in, out)
}

func (h *nFT1155Handler) CreateBatch(ctx context.Context, in *CreateBatchRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.CreateBatch(ctx, in, out)
}

func (h *nFT1155Handler) TransferGovernorship(ctx context.Context, in *TransferGovernorshipRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.TransferGovernorship(ctx, in, out)
}

func (h *nFT1155Handler) Mint(ctx context.Context, in *MintRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.Mint(ctx, in, out)
}

func (h *nFT1155Handler) MintBatch(ctx context.Context, in *MintBatchRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.MintBatch(ctx, in, out)
}

func (h *nFT1155Handler) SetCreator(ctx context.Context, in *SetCreatorRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SetCreator(ctx, in, out)
}

func (h *nFT1155Handler) SetIdURI(ctx context.Context, in *SetIdURIRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SetIdURI(ctx, in, out)
}

func (h *nFT1155Handler) SetIdURIs(ctx context.Context, in *SetIdURIsRequest, out *WritingMethodResponse) error {
	return h.NFT1155Handler.SetIdURIs(ctx, in, out)
}

func (h *nFT1155Handler) TransferBatchID(ctx context.Context, in *TransferBatchIDReq, out *WritingMethodResponse) error {
	return h.NFT1155Handler.TransferBatchID(ctx, in, out)
}

func (h *nFT1155Handler) TransferERC20(ctx context.Context, in *TransferERC20Request, out *WritingMethodResponse) error {
	return h.NFT1155Handler.TransferERC20(ctx, in, out)
}

func (h *nFT1155Handler) GetCreateBatchPrice(ctx context.Context, in *CreateBatchRequest, out *GasFeeResponse) error {
	return h.NFT1155Handler.GetCreateBatchPrice(ctx, in, out)
}

func (h *nFT1155Handler) GetTransferBatchIDPrice(ctx context.Context, in *TransferBatchIDReq, out *GasFeeResponse) error {
	return h.NFT1155Handler.GetTransferBatchIDPrice(ctx, in, out)
}

func (h *nFT1155Handler) GetTransferERC20Price(ctx context.Context, in *TransferERC20Request, out *GasFeeResponse) error {
	return h.NFT1155Handler.GetTransferERC20Price(ctx, in, out)
}

func (h *nFT1155Handler) GetTransactionByHash(ctx context.Context, in *GetTransactionByHashReq, out *GetTransactionByHashResponse) error {
	return h.NFT1155Handler.GetTransactionByHash(ctx, in, out)
}
