// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ethereum/eth.proto

package pbEthereum

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Ethereum service

func NewEthereumEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Ethereum service

type EthereumService interface {
	//reading methods
	BalanceETH(ctx context.Context, in *ETHBalanceRequest, opts ...client.CallOption) (*ETHBalanceResponse, error)
}

type ethereumService struct {
	c    client.Client
	name string
}

func NewEthereumService(name string, c client.Client) EthereumService {
	return &ethereumService{
		c:    c,
		name: name,
	}
}

func (c *ethereumService) BalanceETH(ctx context.Context, in *ETHBalanceRequest, opts ...client.CallOption) (*ETHBalanceResponse, error) {
	req := c.c.NewRequest(c.name, "Ethereum.BalanceETH", in)
	out := new(ETHBalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ethereum service

type EthereumHandler interface {
	//reading methods
	BalanceETH(context.Context, *ETHBalanceRequest, *ETHBalanceResponse) error
}

func RegisterEthereumHandler(s server.Server, hdlr EthereumHandler, opts ...server.HandlerOption) error {
	type ethereum interface {
		BalanceETH(ctx context.Context, in *ETHBalanceRequest, out *ETHBalanceResponse) error
	}
	type Ethereum struct {
		ethereum
	}
	h := &ethereumHandler{hdlr}
	return s.Handle(s.NewHandler(&Ethereum{h}, opts...))
}

type ethereumHandler struct {
	EthereumHandler
}

func (h *ethereumHandler) BalanceETH(ctx context.Context, in *ETHBalanceRequest, out *ETHBalanceResponse) error {
	return h.EthereumHandler.BalanceETH(ctx, in, out)
}
