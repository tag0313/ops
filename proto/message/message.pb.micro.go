// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

package pbMessage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OperateMessage service
func NewOperateOopEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

type OperateMessageService interface {
	PutOne(ctx context.Context, in *Msg, opts ...client.CallOption) (*Result, error)
	PutBatch(ctx context.Context, in *Msgs, opts ...client.CallOption) (*Result, error)
	Get(ctx context.Context, in *Num, opts ...client.CallOption) (*Msgs, error)
	GetAll(ctx context.Context, in *UserID, opts ...client.CallOption) (*Msgs, error)
}

type operateMessageService struct {
	c    client.Client
	name string
}

func NewOperateMessageService(name string, c client.Client) OperateMessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "message"
	}
	return &operateMessageService{
		c:    c,
		name: name,
	}
}

func (c *operateMessageService) PutOne(ctx context.Context, in *Msg, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "OperateMessage.PutOne", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateMessageService) PutBatch(ctx context.Context, in *Msgs, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "OperateMessage.PutBatch", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateMessageService) Get(ctx context.Context, in *Num, opts ...client.CallOption) (*Msgs, error) {
	req := c.c.NewRequest(c.name, "OperateMessage.Get", in)
	out := new(Msgs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateMessageService) GetAll(ctx context.Context, in *UserID, opts ...client.CallOption) (*Msgs, error) {
	req := c.c.NewRequest(c.name, "OperateMessage.GetAll", in)
	out := new(Msgs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OperateMessage service

type OperateMessageHandler interface {
	PutOne(context.Context, *Msg, *Result) error
	PutBatch(context.Context, *Msgs, *Result) error
	Get(context.Context, *Num, *Msgs) error
	GetAll(context.Context, *UserID, *Msgs) error
}

func RegisterOperateMessageHandler(s server.Server, hdlr OperateMessageHandler, opts ...server.HandlerOption) error {
	type operateMessage interface {
		PutOne(ctx context.Context, in *Msg, out *Result) error
		PutBatch(ctx context.Context, in *Msgs, out *Result) error
		Get(ctx context.Context, in *Num, out *Msgs) error
		GetAll(ctx context.Context, in *UserID, out *Msgs) error
	}
	type OperateMessage struct {
		operateMessage
	}
	h := &operateMessageHandler{hdlr}
	return s.Handle(s.NewHandler(&OperateMessage{h}, opts...))
}

type operateMessageHandler struct {
	OperateMessageHandler
}

func (h *operateMessageHandler) PutOne(ctx context.Context, in *Msg, out *Result) error {
	return h.OperateMessageHandler.PutOne(ctx, in, out)
}

func (h *operateMessageHandler) PutBatch(ctx context.Context, in *Msgs, out *Result) error {
	return h.OperateMessageHandler.PutBatch(ctx, in, out)
}

func (h *operateMessageHandler) Get(ctx context.Context, in *Num, out *Msgs) error {
	return h.OperateMessageHandler.Get(ctx, in, out)
}

func (h *operateMessageHandler) GetAll(ctx context.Context, in *UserID, out *Msgs) error {
	return h.OperateMessageHandler.GetAll(ctx, in, out)
}
