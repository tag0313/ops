// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oop.proto

package oop

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OperateOop service
func NewOperatePropertyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

type OperateOopService interface {
	StoreOop(ctx context.Context, in *Oop, opts ...client.CallOption) (*OneResult, error)
	UpdateOop(ctx context.Context, in *Oop, opts ...client.CallOption) (*OneResult, error)
	DeleteOop(ctx context.Context, in *Delete, opts ...client.CallOption) (*DeleteResult, error)
	QueryOwnerOop(ctx context.Context, in *Query, opts ...client.CallOption) (*ManyResult, error)
	QueryOtherOop(ctx context.Context, in *Query, opts ...client.CallOption) (*ManyResult, error)
	SquareOop(ctx context.Context, in *Query, opts ...client.CallOption) (*ManyResult, error)
	QueryFollowOop(ctx context.Context, in *FollowOop, opts ...client.CallOption) (*ManyResult, error)
	LikeOop(ctx context.Context, in *Like, opts ...client.CallOption) (*LikeOopResult, error)
	MyLikeOop(ctx context.Context, in *MyLike, opts ...client.CallOption) (*MyLikeOopResult, error)
	CancelLikeOop(ctx context.Context, in *CancelLike, opts ...client.CallOption) (*CancelLikeResult, error)
}

type operateOopService struct {
	c    client.Client
	name string
}

func NewOperateOopService(name string, c client.Client) OperateOopService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "oop"
	}
	return &operateOopService{
		c:    c,
		name: name,
	}
}

func (c *operateOopService) StoreOop(ctx context.Context, in *Oop, opts ...client.CallOption) (*OneResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.StoreOop", in)
	out := new(OneResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) UpdateOop(ctx context.Context, in *Oop, opts ...client.CallOption) (*OneResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.UpdateOop", in)
	out := new(OneResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) DeleteOop(ctx context.Context, in *Delete, opts ...client.CallOption) (*DeleteResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.DeleteOop", in)
	out := new(DeleteResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) QueryOwnerOop(ctx context.Context, in *Query, opts ...client.CallOption) (*ManyResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.QueryOwnerOop", in)
	out := new(ManyResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) QueryOtherOop(ctx context.Context, in *Query, opts ...client.CallOption) (*ManyResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.QueryOtherOop", in)
	out := new(ManyResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) SquareOop(ctx context.Context, in *Query, opts ...client.CallOption) (*ManyResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.SquareOop", in)
	out := new(ManyResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) QueryFollowOop(ctx context.Context, in *FollowOop, opts ...client.CallOption) (*ManyResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.QueryFollowOop", in)
	out := new(ManyResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) LikeOop(ctx context.Context, in *Like, opts ...client.CallOption) (*LikeOopResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.LikeOop", in)
	out := new(LikeOopResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) MyLikeOop(ctx context.Context, in *MyLike, opts ...client.CallOption) (*MyLikeOopResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.MyLikeOop", in)
	out := new(MyLikeOopResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateOopService) CancelLikeOop(ctx context.Context, in *CancelLike, opts ...client.CallOption) (*CancelLikeResult, error) {
	req := c.c.NewRequest(c.name, "OperateOop.CancelLikeOop", in)
	out := new(CancelLikeResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OperateOop service

type OperateOopHandler interface {
	StoreOop(context.Context, *Oop, *OneResult) error
	UpdateOop(context.Context, *Oop, *OneResult) error
	DeleteOop(context.Context, *Delete, *DeleteResult) error
	QueryOwnerOop(context.Context, *Query, *ManyResult) error
	QueryOtherOop(context.Context, *Query, *ManyResult) error
	SquareOop(context.Context, *Query, *ManyResult) error
	QueryFollowOop(context.Context, *FollowOop, *ManyResult) error
	LikeOop(context.Context, *Like, *LikeOopResult) error
	MyLikeOop(context.Context, *MyLike, *MyLikeOopResult) error
	CancelLikeOop(context.Context, *CancelLike, *CancelLikeResult) error
}

func RegisterOperateOopHandler(s server.Server, hdlr OperateOopHandler, opts ...server.HandlerOption) error {
	type operateOop interface {
		StoreOop(ctx context.Context, in *Oop, out *OneResult) error
		UpdateOop(ctx context.Context, in *Oop, out *OneResult) error
		DeleteOop(ctx context.Context, in *Delete, out *DeleteResult) error
		QueryOwnerOop(ctx context.Context, in *Query, out *ManyResult) error
		QueryOtherOop(ctx context.Context, in *Query, out *ManyResult) error
		SquareOop(ctx context.Context, in *Query, out *ManyResult) error
		QueryFollowOop(ctx context.Context, in *FollowOop, out *ManyResult) error
		LikeOop(ctx context.Context, in *Like, out *LikeOopResult) error
		MyLikeOop(ctx context.Context, in *MyLike, out *MyLikeOopResult) error
		CancelLikeOop(ctx context.Context, in *CancelLike, out *CancelLikeResult) error
	}
	type OperateOop struct {
		operateOop
	}
	h := &operateOopHandler{hdlr}
	return s.Handle(s.NewHandler(&OperateOop{h}, opts...))
}

type operateOopHandler struct {
	OperateOopHandler
}

func (h *operateOopHandler) StoreOop(ctx context.Context, in *Oop, out *OneResult) error {
	return h.OperateOopHandler.StoreOop(ctx, in, out)
}

func (h *operateOopHandler) UpdateOop(ctx context.Context, in *Oop, out *OneResult) error {
	return h.OperateOopHandler.UpdateOop(ctx, in, out)
}

func (h *operateOopHandler) DeleteOop(ctx context.Context, in *Delete, out *DeleteResult) error {
	return h.OperateOopHandler.DeleteOop(ctx, in, out)
}

func (h *operateOopHandler) QueryOwnerOop(ctx context.Context, in *Query, out *ManyResult) error {
	return h.OperateOopHandler.QueryOwnerOop(ctx, in, out)
}

func (h *operateOopHandler) QueryOtherOop(ctx context.Context, in *Query, out *ManyResult) error {
	return h.OperateOopHandler.QueryOtherOop(ctx, in, out)
}

func (h *operateOopHandler) SquareOop(ctx context.Context, in *Query, out *ManyResult) error {
	return h.OperateOopHandler.SquareOop(ctx, in, out)
}

func (h *operateOopHandler) QueryFollowOop(ctx context.Context, in *FollowOop, out *ManyResult) error {
	return h.OperateOopHandler.QueryFollowOop(ctx, in, out)
}

func (h *operateOopHandler) LikeOop(ctx context.Context, in *Like, out *LikeOopResult) error {
	return h.OperateOopHandler.LikeOop(ctx, in, out)
}

func (h *operateOopHandler) MyLikeOop(ctx context.Context, in *MyLike, out *MyLikeOopResult) error {
	return h.OperateOopHandler.MyLikeOop(ctx, in, out)
}

func (h *operateOopHandler) CancelLikeOop(ctx context.Context, in *CancelLike, out *CancelLikeResult) error {
	return h.OperateOopHandler.CancelLikeOop(ctx, in, out)
}
