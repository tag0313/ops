// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/userInfo/user_info.proto

package pbUserInfo

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OperateUserInfo service

func NewOperateUserInfoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OperateUserInfo service

type OperateUserInfoService interface {
	StoreUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*OperateResult, error)
	UpdateUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error)
	DeleteUserInfo(ctx context.Context, in *QueryAndDelete, opts ...client.CallOption) (*OperateResult, error)
	QueryUserInfo(ctx context.Context, in *QueryAndDelete, opts ...client.CallOption) (*UserInfo, error)
	IsRepeatedOpsAccount(ctx context.Context, in *CheckOpsAccount, opts ...client.CallOption) (*OperateResult, error)
	OneStepProtect(ctx context.Context, in *SetPrivate, opts ...client.CallOption) (*OperateResult, error)
	ModifyOopNum(ctx context.Context, in *OopNum, opts ...client.CallOption) (*OperateResult, error)
	SetPrice(ctx context.Context, in *Price, opts ...client.CallOption) (*Price, error)
	SetTotalReleaseOCardNum(ctx context.Context, in *TotalReleaseOCardNum, opts ...client.CallOption) (*OperateResult, error)
	GetUidByOpsAccount(ctx context.Context, in *OpsAccounts, opts ...client.CallOption) (*OpsAccounts, error)
	GetPbkAddrByUid(ctx context.Context, in *UidAndPbkaddr, opts ...client.CallOption) (*UidAndPbkaddr, error)
}

type operateUserInfoService struct {
	c    client.Client
	name string
}

func NewOperateUserInfoService(name string, c client.Client) OperateUserInfoService {
	return &operateUserInfoService{
		c:    c,
		name: name,
	}
}

func (c *operateUserInfoService) StoreUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.StoreUserInfo", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) UpdateUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.UpdateUserInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) DeleteUserInfo(ctx context.Context, in *QueryAndDelete, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.DeleteUserInfo", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) QueryUserInfo(ctx context.Context, in *QueryAndDelete, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.QueryUserInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) IsRepeatedOpsAccount(ctx context.Context, in *CheckOpsAccount, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.IsRepeatedOpsAccount", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) OneStepProtect(ctx context.Context, in *SetPrivate, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.OneStepProtect", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) ModifyOopNum(ctx context.Context, in *OopNum, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.ModifyOopNum", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) SetPrice(ctx context.Context, in *Price, opts ...client.CallOption) (*Price, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.SetPrice", in)
	out := new(Price)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) SetTotalReleaseOCardNum(ctx context.Context, in *TotalReleaseOCardNum, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.SetTotalReleaseOCardNum", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) GetUidByOpsAccount(ctx context.Context, in *OpsAccounts, opts ...client.CallOption) (*OpsAccounts, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.GetUidByOpsAccount", in)
	out := new(OpsAccounts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateUserInfoService) GetPbkAddrByUid(ctx context.Context, in *UidAndPbkaddr, opts ...client.CallOption) (*UidAndPbkaddr, error) {
	req := c.c.NewRequest(c.name, "OperateUserInfo.GetPbkAddrByUid", in)
	out := new(UidAndPbkaddr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OperateUserInfo service

type OperateUserInfoHandler interface {
	StoreUserInfo(context.Context, *UserInfo, *OperateResult) error
	UpdateUserInfo(context.Context, *UserInfo, *UserInfo) error
	DeleteUserInfo(context.Context, *QueryAndDelete, *OperateResult) error
	QueryUserInfo(context.Context, *QueryAndDelete, *UserInfo) error
	IsRepeatedOpsAccount(context.Context, *CheckOpsAccount, *OperateResult) error
	OneStepProtect(context.Context, *SetPrivate, *OperateResult) error
	ModifyOopNum(context.Context, *OopNum, *OperateResult) error
	SetPrice(context.Context, *Price, *Price) error
	SetTotalReleaseOCardNum(context.Context, *TotalReleaseOCardNum, *OperateResult) error
	GetUidByOpsAccount(context.Context, *OpsAccounts, *OpsAccounts) error
	GetPbkAddrByUid(context.Context, *UidAndPbkaddr, *UidAndPbkaddr) error
}

func RegisterOperateUserInfoHandler(s server.Server, hdlr OperateUserInfoHandler, opts ...server.HandlerOption) error {
	type operateUserInfo interface {
		StoreUserInfo(ctx context.Context, in *UserInfo, out *OperateResult) error
		UpdateUserInfo(ctx context.Context, in *UserInfo, out *UserInfo) error
		DeleteUserInfo(ctx context.Context, in *QueryAndDelete, out *OperateResult) error
		QueryUserInfo(ctx context.Context, in *QueryAndDelete, out *UserInfo) error
		IsRepeatedOpsAccount(ctx context.Context, in *CheckOpsAccount, out *OperateResult) error
		OneStepProtect(ctx context.Context, in *SetPrivate, out *OperateResult) error
		ModifyOopNum(ctx context.Context, in *OopNum, out *OperateResult) error
		SetPrice(ctx context.Context, in *Price, out *Price) error
		SetTotalReleaseOCardNum(ctx context.Context, in *TotalReleaseOCardNum, out *OperateResult) error
		GetUidByOpsAccount(ctx context.Context, in *OpsAccounts, out *OpsAccounts) error
		GetPbkAddrByUid(ctx context.Context, in *UidAndPbkaddr, out *UidAndPbkaddr) error
	}
	type OperateUserInfo struct {
		operateUserInfo
	}
	h := &operateUserInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&OperateUserInfo{h}, opts...))
}

type operateUserInfoHandler struct {
	OperateUserInfoHandler
}

func (h *operateUserInfoHandler) StoreUserInfo(ctx context.Context, in *UserInfo, out *OperateResult) error {
	return h.OperateUserInfoHandler.StoreUserInfo(ctx, in, out)
}

func (h *operateUserInfoHandler) UpdateUserInfo(ctx context.Context, in *UserInfo, out *UserInfo) error {
	return h.OperateUserInfoHandler.UpdateUserInfo(ctx, in, out)
}

func (h *operateUserInfoHandler) DeleteUserInfo(ctx context.Context, in *QueryAndDelete, out *OperateResult) error {
	return h.OperateUserInfoHandler.DeleteUserInfo(ctx, in, out)
}

func (h *operateUserInfoHandler) QueryUserInfo(ctx context.Context, in *QueryAndDelete, out *UserInfo) error {
	return h.OperateUserInfoHandler.QueryUserInfo(ctx, in, out)
}

func (h *operateUserInfoHandler) IsRepeatedOpsAccount(ctx context.Context, in *CheckOpsAccount, out *OperateResult) error {
	return h.OperateUserInfoHandler.IsRepeatedOpsAccount(ctx, in, out)
}

func (h *operateUserInfoHandler) OneStepProtect(ctx context.Context, in *SetPrivate, out *OperateResult) error {
	return h.OperateUserInfoHandler.OneStepProtect(ctx, in, out)
}

func (h *operateUserInfoHandler) ModifyOopNum(ctx context.Context, in *OopNum, out *OperateResult) error {
	return h.OperateUserInfoHandler.ModifyOopNum(ctx, in, out)
}

func (h *operateUserInfoHandler) SetPrice(ctx context.Context, in *Price, out *Price) error {
	return h.OperateUserInfoHandler.SetPrice(ctx, in, out)
}

func (h *operateUserInfoHandler) SetTotalReleaseOCardNum(ctx context.Context, in *TotalReleaseOCardNum, out *OperateResult) error {
	return h.OperateUserInfoHandler.SetTotalReleaseOCardNum(ctx, in, out)
}

func (h *operateUserInfoHandler) GetUidByOpsAccount(ctx context.Context, in *OpsAccounts, out *OpsAccounts) error {
	return h.OperateUserInfoHandler.GetUidByOpsAccount(ctx, in, out)
}

func (h *operateUserInfoHandler) GetPbkAddrByUid(ctx context.Context, in *UidAndPbkaddr, out *UidAndPbkaddr) error {
	return h.OperateUserInfoHandler.GetPbkAddrByUid(ctx, in, out)
}
