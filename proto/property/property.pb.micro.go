// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/property/property.proto

package pbProperty

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OperateProperty service

func NewOperatePropertyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OperateProperty service

type OperatePropertyService interface {
	OperateOpsPoint(ctx context.Context, in *OpsPoint, opts ...client.CallOption) (*OperateResult, error)
	CheckOpsPoint(ctx context.Context, in *OpsPoint, opts ...client.CallOption) (*OpsPoint, error)
	StoreMintOCardInfo(ctx context.Context, in *OCard, opts ...client.CallOption) (*OperateResult, error)
	StoreMintOCardsInfo(ctx context.Context, in *OCards, opts ...client.CallOption) (*OperateResult, error)
	StoreMintOCardsSuccessInfo(ctx context.Context, in *MintOCardsSuccessInfo, opts ...client.CallOption) (*OperateResult, error)
	BuyOCardOnOps(ctx context.Context, in *BuyOCardOnOpsReq, opts ...client.CallOption) (*OperateResult, error)
	OperateOCardAmount(ctx context.Context, in *OCard, opts ...client.CallOption) (*OperateResult, error)
	StoreOCardFromChain(ctx context.Context, in *OCardsOnOps, opts ...client.CallOption) (*OperateResult, error)
	QueryMintedOCard(ctx context.Context, in *QueryField, opts ...client.CallOption) (*ListOCardOnMongo, error)
	QueryOCardFromLocal(ctx context.Context, in *QueryField, opts ...client.CallOption) (*ListOCardOnOps, error)
	QueryOCardFromChain(ctx context.Context, in *QueryField, opts ...client.CallOption) (*ListOCardOnOps, error)
	RelationshipJsonIdAndGroupId(ctx context.Context, in *JsonIdAndGroupId, opts ...client.CallOption) (*OperateResult, error)
	RelationshipJsonIdAndGroupIds(ctx context.Context, in *JsonIdAndGroupIds, opts ...client.CallOption) (*OperateResult, error)
	//cache withdraw opspoint history
	StoreWithdrawHistory(ctx context.Context, in *WithdrawOpspoint, opts ...client.CallOption) (*OperateResult, error)
	//withdraw status handler
	StoreTransferERC20History(ctx context.Context, in *TransferERC20Request, opts ...client.CallOption) (*TransferERC20Response, error)
	//check total amount for ocard on ops
	CheckOCardAmountOps(ctx context.Context, in *OCardsOnOps, opts ...client.CallOption) (*OCardsOnOps, error)
	//operate ocard amount for each type on ops
	OperateOCardAmountOps(ctx context.Context, in *OCardsOnOps, opts ...client.CallOption) (*OperateResult, error)
	IncDecOpsPoint(ctx context.Context, in *IncDecOpsPointReq, opts ...client.CallOption) (*IncDecOpsPointResp, error)
}

type operatePropertyService struct {
	c    client.Client
	name string
}

func NewOperatePropertyService(name string, c client.Client) OperatePropertyService {
	return &operatePropertyService{
		c:    c,
		name: name,
	}
}

func (c *operatePropertyService) OperateOpsPoint(ctx context.Context, in *OpsPoint, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.OperateOpsPoint", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) CheckOpsPoint(ctx context.Context, in *OpsPoint, opts ...client.CallOption) (*OpsPoint, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.CheckOpsPoint", in)
	out := new(OpsPoint)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) StoreMintOCardInfo(ctx context.Context, in *OCard, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.StoreMintOCardInfo", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) StoreMintOCardsInfo(ctx context.Context, in *OCards, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.StoreMintOCardsInfo", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) StoreMintOCardsSuccessInfo(ctx context.Context, in *MintOCardsSuccessInfo, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.StoreMintOCardsSuccessInfo", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) BuyOCardOnOps(ctx context.Context, in *BuyOCardOnOpsReq, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.BuyOCardOnOps", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) OperateOCardAmount(ctx context.Context, in *OCard, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.OperateOCardAmount", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) StoreOCardFromChain(ctx context.Context, in *OCardsOnOps, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.StoreOCardFromChain", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) QueryMintedOCard(ctx context.Context, in *QueryField, opts ...client.CallOption) (*ListOCardOnMongo, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.QueryMintedOCard", in)
	out := new(ListOCardOnMongo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) QueryOCardFromLocal(ctx context.Context, in *QueryField, opts ...client.CallOption) (*ListOCardOnOps, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.QueryOCardFromLocal", in)
	out := new(ListOCardOnOps)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) QueryOCardFromChain(ctx context.Context, in *QueryField, opts ...client.CallOption) (*ListOCardOnOps, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.QueryOCardFromChain", in)
	out := new(ListOCardOnOps)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) RelationshipJsonIdAndGroupId(ctx context.Context, in *JsonIdAndGroupId, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.RelationshipJsonIdAndGroupId", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) RelationshipJsonIdAndGroupIds(ctx context.Context, in *JsonIdAndGroupIds, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.RelationshipJsonIdAndGroupIds", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) StoreWithdrawHistory(ctx context.Context, in *WithdrawOpspoint, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.StoreWithdrawHistory", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) StoreTransferERC20History(ctx context.Context, in *TransferERC20Request, opts ...client.CallOption) (*TransferERC20Response, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.StoreTransferERC20History", in)
	out := new(TransferERC20Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) CheckOCardAmountOps(ctx context.Context, in *OCardsOnOps, opts ...client.CallOption) (*OCardsOnOps, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.CheckOCardAmountOps", in)
	out := new(OCardsOnOps)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) OperateOCardAmountOps(ctx context.Context, in *OCardsOnOps, opts ...client.CallOption) (*OperateResult, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.OperateOCardAmountOps", in)
	out := new(OperateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatePropertyService) IncDecOpsPoint(ctx context.Context, in *IncDecOpsPointReq, opts ...client.CallOption) (*IncDecOpsPointResp, error) {
	req := c.c.NewRequest(c.name, "OperateProperty.IncDecOpsPoint", in)
	out := new(IncDecOpsPointResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OperateProperty service

type OperatePropertyHandler interface {
	OperateOpsPoint(context.Context, *OpsPoint, *OperateResult) error
	CheckOpsPoint(context.Context, *OpsPoint, *OpsPoint) error
	StoreMintOCardInfo(context.Context, *OCard, *OperateResult) error
	StoreMintOCardsInfo(context.Context, *OCards, *OperateResult) error
	StoreMintOCardsSuccessInfo(context.Context, *MintOCardsSuccessInfo, *OperateResult) error
	BuyOCardOnOps(context.Context, *BuyOCardOnOpsReq, *OperateResult) error
	OperateOCardAmount(context.Context, *OCard, *OperateResult) error
	StoreOCardFromChain(context.Context, *OCardsOnOps, *OperateResult) error
	QueryMintedOCard(context.Context, *QueryField, *ListOCardOnMongo) error
	QueryOCardFromLocal(context.Context, *QueryField, *ListOCardOnOps) error
	QueryOCardFromChain(context.Context, *QueryField, *ListOCardOnOps) error
	RelationshipJsonIdAndGroupId(context.Context, *JsonIdAndGroupId, *OperateResult) error
	RelationshipJsonIdAndGroupIds(context.Context, *JsonIdAndGroupIds, *OperateResult) error
	//cache withdraw opspoint history
	StoreWithdrawHistory(context.Context, *WithdrawOpspoint, *OperateResult) error
	//withdraw status handler
	StoreTransferERC20History(context.Context, *TransferERC20Request, *TransferERC20Response) error
	//check total amount for ocard on ops
	CheckOCardAmountOps(context.Context, *OCardsOnOps, *OCardsOnOps) error
	//operate ocard amount for each type on ops
	OperateOCardAmountOps(context.Context, *OCardsOnOps, *OperateResult) error
	IncDecOpsPoint(context.Context, *IncDecOpsPointReq, *IncDecOpsPointResp) error
}

func RegisterOperatePropertyHandler(s server.Server, hdlr OperatePropertyHandler, opts ...server.HandlerOption) error {
	type operateProperty interface {
		OperateOpsPoint(ctx context.Context, in *OpsPoint, out *OperateResult) error
		CheckOpsPoint(ctx context.Context, in *OpsPoint, out *OpsPoint) error
		StoreMintOCardInfo(ctx context.Context, in *OCard, out *OperateResult) error
		StoreMintOCardsInfo(ctx context.Context, in *OCards, out *OperateResult) error
		StoreMintOCardsSuccessInfo(ctx context.Context, in *MintOCardsSuccessInfo, out *OperateResult) error
		BuyOCardOnOps(ctx context.Context, in *BuyOCardOnOpsReq, out *OperateResult) error
		OperateOCardAmount(ctx context.Context, in *OCard, out *OperateResult) error
		StoreOCardFromChain(ctx context.Context, in *OCardsOnOps, out *OperateResult) error
		QueryMintedOCard(ctx context.Context, in *QueryField, out *ListOCardOnMongo) error
		QueryOCardFromLocal(ctx context.Context, in *QueryField, out *ListOCardOnOps) error
		QueryOCardFromChain(ctx context.Context, in *QueryField, out *ListOCardOnOps) error
		RelationshipJsonIdAndGroupId(ctx context.Context, in *JsonIdAndGroupId, out *OperateResult) error
		RelationshipJsonIdAndGroupIds(ctx context.Context, in *JsonIdAndGroupIds, out *OperateResult) error
		StoreWithdrawHistory(ctx context.Context, in *WithdrawOpspoint, out *OperateResult) error
		StoreTransferERC20History(ctx context.Context, in *TransferERC20Request, out *TransferERC20Response) error
		CheckOCardAmountOps(ctx context.Context, in *OCardsOnOps, out *OCardsOnOps) error
		OperateOCardAmountOps(ctx context.Context, in *OCardsOnOps, out *OperateResult) error
		IncDecOpsPoint(ctx context.Context, in *IncDecOpsPointReq, out *IncDecOpsPointResp) error
	}
	type OperateProperty struct {
		operateProperty
	}
	h := &operatePropertyHandler{hdlr}
	return s.Handle(s.NewHandler(&OperateProperty{h}, opts...))
}

type operatePropertyHandler struct {
	OperatePropertyHandler
}

func (h *operatePropertyHandler) OperateOpsPoint(ctx context.Context, in *OpsPoint, out *OperateResult) error {
	return h.OperatePropertyHandler.OperateOpsPoint(ctx, in, out)
}

func (h *operatePropertyHandler) CheckOpsPoint(ctx context.Context, in *OpsPoint, out *OpsPoint) error {
	return h.OperatePropertyHandler.CheckOpsPoint(ctx, in, out)
}

func (h *operatePropertyHandler) StoreMintOCardInfo(ctx context.Context, in *OCard, out *OperateResult) error {
	return h.OperatePropertyHandler.StoreMintOCardInfo(ctx, in, out)
}

func (h *operatePropertyHandler) StoreMintOCardsInfo(ctx context.Context, in *OCards, out *OperateResult) error {
	return h.OperatePropertyHandler.StoreMintOCardsInfo(ctx, in, out)
}

func (h *operatePropertyHandler) StoreMintOCardsSuccessInfo(ctx context.Context, in *MintOCardsSuccessInfo, out *OperateResult) error {
	return h.OperatePropertyHandler.StoreMintOCardsSuccessInfo(ctx, in, out)
}

func (h *operatePropertyHandler) BuyOCardOnOps(ctx context.Context, in *BuyOCardOnOpsReq, out *OperateResult) error {
	return h.OperatePropertyHandler.BuyOCardOnOps(ctx, in, out)
}

func (h *operatePropertyHandler) OperateOCardAmount(ctx context.Context, in *OCard, out *OperateResult) error {
	return h.OperatePropertyHandler.OperateOCardAmount(ctx, in, out)
}

func (h *operatePropertyHandler) StoreOCardFromChain(ctx context.Context, in *OCardsOnOps, out *OperateResult) error {
	return h.OperatePropertyHandler.StoreOCardFromChain(ctx, in, out)
}

func (h *operatePropertyHandler) QueryMintedOCard(ctx context.Context, in *QueryField, out *ListOCardOnMongo) error {
	return h.OperatePropertyHandler.QueryMintedOCard(ctx, in, out)
}

func (h *operatePropertyHandler) QueryOCardFromLocal(ctx context.Context, in *QueryField, out *ListOCardOnOps) error {
	return h.OperatePropertyHandler.QueryOCardFromLocal(ctx, in, out)
}

func (h *operatePropertyHandler) QueryOCardFromChain(ctx context.Context, in *QueryField, out *ListOCardOnOps) error {
	return h.OperatePropertyHandler.QueryOCardFromChain(ctx, in, out)
}

func (h *operatePropertyHandler) RelationshipJsonIdAndGroupId(ctx context.Context, in *JsonIdAndGroupId, out *OperateResult) error {
	return h.OperatePropertyHandler.RelationshipJsonIdAndGroupId(ctx, in, out)
}

func (h *operatePropertyHandler) RelationshipJsonIdAndGroupIds(ctx context.Context, in *JsonIdAndGroupIds, out *OperateResult) error {
	return h.OperatePropertyHandler.RelationshipJsonIdAndGroupIds(ctx, in, out)
}

func (h *operatePropertyHandler) StoreWithdrawHistory(ctx context.Context, in *WithdrawOpspoint, out *OperateResult) error {
	return h.OperatePropertyHandler.StoreWithdrawHistory(ctx, in, out)
}

func (h *operatePropertyHandler) StoreTransferERC20History(ctx context.Context, in *TransferERC20Request, out *TransferERC20Response) error {
	return h.OperatePropertyHandler.StoreTransferERC20History(ctx, in, out)
}

func (h *operatePropertyHandler) CheckOCardAmountOps(ctx context.Context, in *OCardsOnOps, out *OCardsOnOps) error {
	return h.OperatePropertyHandler.CheckOCardAmountOps(ctx, in, out)
}

func (h *operatePropertyHandler) OperateOCardAmountOps(ctx context.Context, in *OCardsOnOps, out *OperateResult) error {
	return h.OperatePropertyHandler.OperateOCardAmountOps(ctx, in, out)
}

func (h *operatePropertyHandler) IncDecOpsPoint(ctx context.Context, in *IncDecOpsPointReq, out *IncDecOpsPointResp) error {
	return h.OperatePropertyHandler.IncDecOpsPoint(ctx, in, out)
}
