// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/report/report.proto

package pbReport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OperateReport service

func NewOperateReportEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OperateReport service

type OperateReportService interface {
	ReportOop(ctx context.Context, in *ReportOopInfo, opts ...client.CallOption) (*ReportResult, error)
	ReportUser(ctx context.Context, in *ReportUserInfo, opts ...client.CallOption) (*ReportResult, error)
	GetUserReportTimes(ctx context.Context, in *UserID, opts ...client.CallOption) (*UserReportedTimes, error)
}

type operateReportService struct {
	c    client.Client
	name string
}

func NewOperateReportService(name string, c client.Client) OperateReportService {
	return &operateReportService{
		c:    c,
		name: name,
	}
}

func (c *operateReportService) ReportOop(ctx context.Context, in *ReportOopInfo, opts ...client.CallOption) (*ReportResult, error) {
	req := c.c.NewRequest(c.name, "OperateReport.ReportOop", in)
	out := new(ReportResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateReportService) ReportUser(ctx context.Context, in *ReportUserInfo, opts ...client.CallOption) (*ReportResult, error) {
	req := c.c.NewRequest(c.name, "OperateReport.ReportUser", in)
	out := new(ReportResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateReportService) GetUserReportTimes(ctx context.Context, in *UserID, opts ...client.CallOption) (*UserReportedTimes, error) {
	req := c.c.NewRequest(c.name, "OperateReport.GetUserReportTimes", in)
	out := new(UserReportedTimes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OperateReport service

type OperateReportHandler interface {
	ReportOop(context.Context, *ReportOopInfo, *ReportResult) error
	ReportUser(context.Context, *ReportUserInfo, *ReportResult) error
	GetUserReportTimes(context.Context, *UserID, *UserReportedTimes) error
}

func RegisterOperateReportHandler(s server.Server, hdlr OperateReportHandler, opts ...server.HandlerOption) error {
	type operateReport interface {
		ReportOop(ctx context.Context, in *ReportOopInfo, out *ReportResult) error
		ReportUser(ctx context.Context, in *ReportUserInfo, out *ReportResult) error
		GetUserReportTimes(ctx context.Context, in *UserID, out *UserReportedTimes) error
	}
	type OperateReport struct {
		operateReport
	}
	h := &operateReportHandler{hdlr}
	return s.Handle(s.NewHandler(&OperateReport{h}, opts...))
}

type operateReportHandler struct {
	OperateReportHandler
}

func (h *operateReportHandler) ReportOop(ctx context.Context, in *ReportOopInfo, out *ReportResult) error {
	return h.OperateReportHandler.ReportOop(ctx, in, out)
}

func (h *operateReportHandler) ReportUser(ctx context.Context, in *ReportUserInfo, out *ReportResult) error {
	return h.OperateReportHandler.ReportUser(ctx, in, out)
}

func (h *operateReportHandler) GetUserReportTimes(ctx context.Context, in *UserID, out *UserReportedTimes) error {
	return h.OperateReportHandler.GetUserReportTimes(ctx, in, out)
}
