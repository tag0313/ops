// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/swap/swap.proto

package pbSwap

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Swap service

func NewSwapEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Swap service

type SwapService interface {
	OPS2USDT(ctx context.Context, in *MoneyRequest, opts ...client.CallOption) (*MoneyResponse, error)
	ETH2USDT(ctx context.Context, in *MoneyRequest, opts ...client.CallOption) (*MoneyResponse, error)
	//    rpc OPS2ETH(OPS2ETHRequest) returns (OPS2ETHResponse);
	ETH2OPS(ctx context.Context, in *MoneyRequest, opts ...client.CallOption) (*MoneyResponse, error)
}

type swapService struct {
	c    client.Client
	name string
}

func NewSwapService(name string, c client.Client) SwapService {
	return &swapService{
		c:    c,
		name: name,
	}
}

func (c *swapService) OPS2USDT(ctx context.Context, in *MoneyRequest, opts ...client.CallOption) (*MoneyResponse, error) {
	req := c.c.NewRequest(c.name, "Swap.OPS2USDT", in)
	out := new(MoneyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapService) ETH2USDT(ctx context.Context, in *MoneyRequest, opts ...client.CallOption) (*MoneyResponse, error) {
	req := c.c.NewRequest(c.name, "Swap.ETH2USDT", in)
	out := new(MoneyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapService) ETH2OPS(ctx context.Context, in *MoneyRequest, opts ...client.CallOption) (*MoneyResponse, error) {
	req := c.c.NewRequest(c.name, "Swap.ETH2OPS", in)
	out := new(MoneyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Swap service

type SwapHandler interface {
	OPS2USDT(context.Context, *MoneyRequest, *MoneyResponse) error
	ETH2USDT(context.Context, *MoneyRequest, *MoneyResponse) error
	//    rpc OPS2ETH(OPS2ETHRequest) returns (OPS2ETHResponse);
	ETH2OPS(context.Context, *MoneyRequest, *MoneyResponse) error
}

func RegisterSwapHandler(s server.Server, hdlr SwapHandler, opts ...server.HandlerOption) error {
	type swap interface {
		OPS2USDT(ctx context.Context, in *MoneyRequest, out *MoneyResponse) error
		ETH2USDT(ctx context.Context, in *MoneyRequest, out *MoneyResponse) error
		ETH2OPS(ctx context.Context, in *MoneyRequest, out *MoneyResponse) error
	}
	type Swap struct {
		swap
	}
	h := &swapHandler{hdlr}
	return s.Handle(s.NewHandler(&Swap{h}, opts...))
}

type swapHandler struct {
	SwapHandler
}

func (h *swapHandler) OPS2USDT(ctx context.Context, in *MoneyRequest, out *MoneyResponse) error {
	return h.SwapHandler.OPS2USDT(ctx, in, out)
}

func (h *swapHandler) ETH2USDT(ctx context.Context, in *MoneyRequest, out *MoneyResponse) error {
	return h.SwapHandler.ETH2USDT(ctx, in, out)
}

func (h *swapHandler) ETH2OPS(ctx context.Context, in *MoneyRequest, out *MoneyResponse) error {
	return h.SwapHandler.ETH2OPS(ctx, in, out)
}
